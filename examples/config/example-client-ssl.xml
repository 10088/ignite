<?xml version="1.0" encoding="UTF-8"?>

<!--
    _________        _____ __________________        _____
    __  ____/___________(_)______  /__  ____/______ ____(_)_______
    _  / __  __  ___/__  / _  __  / _  / __  _  __ `/__  / __  __ \
    / /_/ /  _  /    _  /  / /_/ /  / /_/ /  / /_/ / _  /  _  / / /
    \____/   /_/     /_/   \_,__/   \____/   \__,_/  /_/   /_/ /_/

    @xml.file.header
    Version: @xml.file.version
-->

<!--
    GridGain Spring configuration file to startup grid node with SSL rest.

    When starting a standalone GridGain node, you need to execute the following command:
    {GRIDGAIN_HOME}/bin/ggstart.{bat|sh} examples/config/example-client-ssl.xml

    When starting GridGain from Java IDE, pass path to this file into GridFactory:
    GridFactory.start("examples/config/example-client-ssl.xml");
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">
    <!-- Create a property placeholder configurer so we can refer to GRIDGAIN_HOME environment variable -->
    <bean name="placeholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="searchSystemEnvironment" value="true"/>
    </bean>

    <!--
        Configuration below demonstrates how to setup SSL for REST communication. Note that in this example
        we use our custom key- and trust-stores shipped with product. You should generate your own stores
        to achieve necessary security level.
    -->
    <bean id="grid.cfg" class="org.gridgain.grid.GridConfiguration" scope="singleton">
        <property name="deploymentMode" value="SHARED"/>

        <!-- Set to local host address just for examples. -->
        <property name="localHost" value="127.0.0.1"/>

        <!-- Enable REST with SSL. -->
        <property name="restEnabled" value="true"/>
        <property name="restJettyPath" value="examples/config/rest-jetty-ssl.xml"/>

        <property name="restTcpSslEnabled" value="true"/>

        <!-- Require TLS client authentication. -->
        <property name="restTcpSslClientAuth" value="true"/>

        <!--
            For better performance set this property to false in case
            peer deployment is not used.
            Default value is false.
        -->
        <property name="peerClassLoadingEnabled" value="true"/>

        <!--
            Configure optimized marshaller.
        -->
        <property name="marshaller">
            <bean class="org.gridgain.grid.marshaller.optimized.GridOptimizedMarshaller">
                <!--
                    For better performance set this property to true in case
                    all marshalled classes implement java.io.Serializable.
                    Default value is true.

                    Note, that it is recommended to implement java.io.Externalizable
                    instead of java.io.Serializable for smaller network footprint
                    and even better performance.
                -->
                <property name="requireSerializable" value="false"/>
            </bean>
        </property>

        <!--
            Logger to use. By default 'config/gridgain-log4j.xml' logger file will
            be used. If such file is not found, then default GridGain configuration
            for logging will be used.
        -->
        <property name="gridLogger">
            <bean class="org.gridgain.grid.logger.log4j.GridLog4jLogger">
                <constructor-arg type="java.lang.String" value="examples/config/grid-client-log4j.xml"/>
            </bean>
        </property>

        <!-- Require passcode-based authentication -->
        <!--
        <property name="authenticationSpi">
            <bean class="org.gridgain.grid.spi.authentication.passcode.GridPasscodeAuthenticationSpi">
                <property name="passcodes">
                    <map>
                        <entry key="REMOTE_NODE" value="s3cret"/>
                        <entry key="REMOTE_CLIENT" value="s3cret"/>
                    </map>
                </property>
            </bean>
        </property>
        <property name="secureSessionSpi">
            <bean class="org.gridgain.grid.spi.securesession.rememberme.GridRememberMeSecureSessionSpi">
                <property name="ttl" value="3600000"/>
            </bean>
        </property>
        -->

        <!--
            Both keystore and truststore in this example are in JKS format which is default
            format for GridSslBasicContextFactory.
        -->
        <property name="restTcpSslContextFactory">
            <bean class="org.gridgain.client.ssl.GridSslBasicContextFactory">
                <property name="keyStoreFilePath" value="${GRIDGAIN_HOME}/examples/keystore/server.jks"/>
                <property name="keyStorePassword" value="123456"/>
                <property name="trustStoreFilePath" value="${GRIDGAIN_HOME}/examples/keystore/trust.jks"/>
                <property name="trustStorePassword" value="123456"/>
            </bean>
        </property>

        <!--
            Use the addresses list to provide IP addresses of initial nodes in the grid
            (at least one address must be provided).
        -->
        <property name="discoverySpi">
            <bean class="org.gridgain.grid.spi.discovery.tcp.GridTcpDiscoverySpi">
                <property name="ipFinder">
                    <bean class="org.gridgain.grid.spi.discovery.tcp.ipfinder.vm.GridTcpDiscoveryVmIpFinder">
                        <property name="addresses">
                            <list>
                                <!--
                                    List all IP/port configurations that potentially
                                    can be started first in examples. We are assuming
                                    grid of size 10 or less.
                                -->
                                <value>127.0.0.1:47500</value>
                                <value>127.0.0.1:47501</value>
                                <value>127.0.0.1:47502</value>
                                <value>127.0.0.1:47503</value>
                                <value>127.0.0.1:47504</value>
                                <value>127.0.0.1:47505</value>
                                <value>127.0.0.1:47506</value>
                                <value>127.0.0.1:47507</value>
                                <value>127.0.0.1:47508</value>
                                <value>127.0.0.1:47509</value>
                            </list>
                        </property>
                    </bean>
                    <!--
                    Uncomment this to provide IP finder using multicast for nodes discovery.
                    In addition to addresses received via multicast this finder can work with pre-configured
                    list of addresses.
                    -->
                    <!--
                    <bean class="org.gridgain.grid.spi.discovery.tcp.ipfinder.multicast.GridTcpDiscoveryMulticastIpFinder">
                        <property name="addresses">
                            <list>
                                <value>host1:port1</value>
                                <value>host2:port2</value>
                            </list>
                        </property>
                    </bean>
                    -->
                </property>
            </bean>
        </property>
    </bean>
</beans>
