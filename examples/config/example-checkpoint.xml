<?xml version="1.0" encoding="UTF-8"?>

<!--
    _________        _____ __________________        _____
    __  ____/___________(_)______  /__  ____/______ ____(_)_______
    _  / __  __  ___/__  / _  __  / _  / __  _  __ `/__  / __  __ \
    / /_/ /  _  /    _  /  / /_/ /  / /_/ /  / /_/ / _  /  _  / / /
    \____/   /_/     /_/   \_,__/   \____/   \__,_/  /_/   /_/ /_/

    @xml.file.header
    Version: @xml.file.version
-->

<!--
    GridGain Spring configuration file to start compute grid with checkpoints.

    When starting a standalone GridGain node, you need to execute the following command:
    {GRIDGAIN_HOME}/bin/ggstart.{bat|sh} examples/config/example-checkpoint.xml

    When starting GridGain from Java IDE, pass path to this file into GridFactory:
    GridFactory.start("examples/config/example-checkpoint.xml");
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-2.0.xsd">
    <description>Main Spring file for grid configuration.</description>

    <!--
        Grid configuration for examples that need checkpoints.
    -->
    <bean id="grid.cfg" class="org.gridgain.grid.GridConfiguration" scope="singleton">
        <!--
            For better performance set this property to false in case
            peer deployment is not used.
            Default value is false.
        -->
        <property name="peerClassLoadingEnabled" value="true"/>

        <!--
            Configure optimized marshaller.
        -->
        <property name="marshaller">
            <bean class="org.gridgain.grid.marshaller.optimized.GridOptimizedMarshaller">
                <!--
                    For better performance set this property to true in case
                    all marshalled classes implement java.io.Serializable.
                    Default value is true.

                    Note, that it is recommended to implement java.io.Externalizable
                    instead of java.io.Serializable for smaller network footprint
                    and even better performance.
                -->
                <property name="requireSerializable" value="false"/>
            </bean>
        </property>

        <!-- Set to local host address just for examples. -->
        <property name="localHost" value="127.0.0.1"/>

        <!--
            Default configuration for Shared File System Checkpoint SPI.
        -->
        <property name="checkpointSpi">
            <bean class="org.gridgain.grid.spi.checkpoint.sharedfs.GridSharedFsCheckpointSpi">
                <property name="directoryPaths">
                    <list>
                        <value>/work/checkpoint/sharedfs</value>
                    </list>
                </property>
            </bean>
        </property>

        <!--
            TCP discovery SPI configuration with predefined addresses.
            Use the addresses list to provide IP addresses of initial nodes in the grid
            (at least one address must be provided).

            Note:
            =====
            If running in distributed environment, you should change IP addresses to the actual IP addresses
            of the servers on your network. Not all addresses need to be specified, only the addresses
            of one or more servers which will always be started first.
        -->
        <property name="discoverySpi">
            <bean class="org.gridgain.grid.spi.discovery.tcp.GridTcpDiscoverySpi">
                <property name="ipFinder">
                    <bean class="org.gridgain.grid.spi.discovery.tcp.ipfinder.vm.GridTcpDiscoveryVmIpFinder">
                        <property name="addresses">
                            <list>
                                <!--
                                    List all IP/port configurations that potentially
                                    can be started first in examples. We are assuming
                                    grid of size 10 or less.
                                -->
                                <value>127.0.0.1:47500</value>
                                <value>127.0.0.1:47501</value>
                                <value>127.0.0.1:47502</value>
                                <value>127.0.0.1:47503</value>
                                <value>127.0.0.1:47504</value>
                                <value>127.0.0.1:47505</value>
                                <value>127.0.0.1:47506</value>
                                <value>127.0.0.1:47507</value>
                                <value>127.0.0.1:47508</value>
                                <value>127.0.0.1:47509</value>
                            </list>
                        </property>
                    </bean>
                    <!--
                    Uncomment this to provide IP finder using multicast for nodes discovery.
                    In addition to addresses received via multicast this finder can work with pre-configured
                    list of addresses.
                    -->
                    <!--
                    <bean class="org.gridgain.grid.spi.discovery.tcp.ipfinder.multicast.GridTcpDiscoveryMulticastIpFinder">
                        <property name="addresses">
                            <list>
                                <value>host1:port1</value>
                                <value>host2:port2</value>
                            </list>
                        </property>
                    </bean>
                    -->
                </property>
            </bean>
        </property>
    </bean>
</beans>
