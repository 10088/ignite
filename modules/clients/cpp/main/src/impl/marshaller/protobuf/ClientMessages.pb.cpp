// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "../../../../include/gridgain/impl/marshaller/protobuf/ClientMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace gridgain {
namespace grid {
namespace kernal {
namespace processors {
namespace rest {
namespace client {
namespace message {

namespace {

const ::google::protobuf::Descriptor* ObjectWrapper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectWrapper_reflection_ = NULL;
const ::google::protobuf::Descriptor* Collection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Collection_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAuthenticationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAuthenticationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoCacheRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoCacheRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtoCacheRequest_GridCacheOperation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProtoLogRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLogRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTopologyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTopologyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTaskBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTaskBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoNodeMetricsBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoNodeMetricsBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoNodeBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoNodeBean_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjectWrapperType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClientMessages_2eproto() {
  protobuf_AddDesc_ClientMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClientMessages.proto");
  GOOGLE_CHECK(file != NULL);
  ObjectWrapper_descriptor_ = file->message_type(0);
  static const int ObjectWrapper_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectWrapper, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectWrapper, binary_),
  };
  ObjectWrapper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectWrapper_descriptor_,
      ObjectWrapper::default_instance_,
      ObjectWrapper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectWrapper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectWrapper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectWrapper));
  Collection_descriptor_ = file->message_type(1);
  static const int Collection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collection, item_),
  };
  Collection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Collection_descriptor_,
      Collection::default_instance_,
      Collection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Collection));
  KeyValue_descriptor_ = file->message_type(2);
  static const int KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  };
  KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValue));
  Map_descriptor_ = file->message_type(3);
  static const int Map_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, entry_),
  };
  Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_descriptor_,
      Map::default_instance_,
      Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map));
  ProtoRequest_descriptor_ = file->message_type(4);
  static const int ProtoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequest, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequest, sessiontoken_),
  };
  ProtoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRequest_descriptor_,
      ProtoRequest::default_instance_,
      ProtoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRequest));
  ProtoAuthenticationRequest_descriptor_ = file->message_type(5);
  static const int ProtoAuthenticationRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAuthenticationRequest, credentials_),
  };
  ProtoAuthenticationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAuthenticationRequest_descriptor_,
      ProtoAuthenticationRequest::default_instance_,
      ProtoAuthenticationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAuthenticationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAuthenticationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAuthenticationRequest));
  ProtoCacheRequest_descriptor_ = file->message_type(6);
  static const int ProtoCacheRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCacheRequest, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCacheRequest, cachename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCacheRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCacheRequest, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCacheRequest, value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCacheRequest, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCacheRequest, cacheflagson_),
  };
  ProtoCacheRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoCacheRequest_descriptor_,
      ProtoCacheRequest::default_instance_,
      ProtoCacheRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCacheRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCacheRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoCacheRequest));
  ProtoCacheRequest_GridCacheOperation_descriptor_ = ProtoCacheRequest_descriptor_->enum_type(0);
  ProtoLogRequest_descriptor_ = file->message_type(7);
  static const int ProtoLogRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLogRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLogRequest, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLogRequest, to_),
  };
  ProtoLogRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLogRequest_descriptor_,
      ProtoLogRequest::default_instance_,
      ProtoLogRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLogRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLogRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLogRequest));
  ProtoTaskRequest_descriptor_ = file->message_type(8);
  static const int ProtoTaskRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskRequest, taskname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskRequest, argument_),
  };
  ProtoTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTaskRequest_descriptor_,
      ProtoTaskRequest::default_instance_,
      ProtoTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTaskRequest));
  ProtoTopologyRequest_descriptor_ = file->message_type(9);
  static const int ProtoTopologyRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTopologyRequest, includeattributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTopologyRequest, includemetrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTopologyRequest, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTopologyRequest, nodeip_),
  };
  ProtoTopologyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTopologyRequest_descriptor_,
      ProtoTopologyRequest::default_instance_,
      ProtoTopologyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTopologyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTopologyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTopologyRequest));
  ProtoResponse_descriptor_ = file->message_type(10);
  static const int ProtoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResponse, errormessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResponse, resultbean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResponse, sessiontoken_),
  };
  ProtoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoResponse_descriptor_,
      ProtoResponse::default_instance_,
      ProtoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoResponse));
  ProtoTaskBean_descriptor_ = file->message_type(11);
  static const int ProtoTaskBean_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskBean, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskBean, finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskBean, resultbean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskBean, error_),
  };
  ProtoTaskBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTaskBean_descriptor_,
      ProtoTaskBean::default_instance_,
      ProtoTaskBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTaskBean));
  ProtoNodeMetricsBean_descriptor_ = file->message_type(12);
  static const int ProtoNodeMetricsBean_offsets_[52] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, lastupdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, maximumactivejobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, currentactivejobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, averageactivejobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, maximumwaitingjobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, currentwaitingjobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, averagewaitingjobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, maximumrejectedjobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, currentrejectedjobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, averagerejectedjobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, maximumcancelledjobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, currentcancelledjobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, averagecancelledjobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, totalrejectedjobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, totalcancelledjobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, totalexecutedjobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, maximumjobwaittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, currentjobwaittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, averagejobwaittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, maximumjobexecutetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, currentjobexecutetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, averagejobexecutetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, totalidletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, currentidletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, totalcpus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, currentcpuload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, averagecpuload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, heapmemoryinitialized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, heapmemoryused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, heapmemorycommitted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, heapmemorymaximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, nonheapmemoryinitialized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, nonheapmemoryused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, nonheapmemorycommitted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, nonheapmemorymaximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, nodestarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, currentthreadcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, maximumthreadcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, totalstartedthreadcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, currentdaemonthreadcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, filesystemfreespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, filesystemtotalspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, filesystemusablespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, lastdataversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, currentgccpuload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, totalexecutedtasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, sentmessagescount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, sentbytescount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, receivedmessagescount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, receivedbytescount_),
  };
  ProtoNodeMetricsBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoNodeMetricsBean_descriptor_,
      ProtoNodeMetricsBean::default_instance_,
      ProtoNodeMetricsBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeMetricsBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoNodeMetricsBean));
  ProtoNodeBean_descriptor_ = file->message_type(13);
  static const int ProtoNodeBean_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeBean, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeBean, tcpaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeBean, jettyaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeBean, tcpport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeBean, jettyport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeBean, metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeBean, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeBean, caches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeBean, tcphostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeBean, jettyhostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeBean, replicacount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeBean, consistentid_),
  };
  ProtoNodeBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoNodeBean_descriptor_,
      ProtoNodeBean::default_instance_,
      ProtoNodeBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNodeBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoNodeBean));
  ObjectWrapperType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClientMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectWrapper_descriptor_, &ObjectWrapper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Collection_descriptor_, &Collection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValue_descriptor_, &KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_descriptor_, &Map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRequest_descriptor_, &ProtoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAuthenticationRequest_descriptor_, &ProtoAuthenticationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoCacheRequest_descriptor_, &ProtoCacheRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLogRequest_descriptor_, &ProtoLogRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTaskRequest_descriptor_, &ProtoTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTopologyRequest_descriptor_, &ProtoTopologyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoResponse_descriptor_, &ProtoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTaskBean_descriptor_, &ProtoTaskBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoNodeMetricsBean_descriptor_, &ProtoNodeMetricsBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoNodeBean_descriptor_, &ProtoNodeBean::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClientMessages_2eproto() {
  delete ObjectWrapper::default_instance_;
  delete ObjectWrapper_reflection_;
  delete Collection::default_instance_;
  delete Collection_reflection_;
  delete KeyValue::default_instance_;
  delete KeyValue_reflection_;
  delete Map::default_instance_;
  delete Map_reflection_;
  delete ProtoRequest::default_instance_;
  delete ProtoRequest_reflection_;
  delete ProtoAuthenticationRequest::default_instance_;
  delete ProtoAuthenticationRequest_reflection_;
  delete ProtoCacheRequest::default_instance_;
  delete ProtoCacheRequest_reflection_;
  delete ProtoLogRequest::default_instance_;
  delete ProtoLogRequest_reflection_;
  delete ProtoTaskRequest::default_instance_;
  delete ProtoTaskRequest_reflection_;
  delete ProtoTopologyRequest::default_instance_;
  delete ProtoTopologyRequest_reflection_;
  delete ProtoResponse::default_instance_;
  delete ProtoResponse_reflection_;
  delete ProtoTaskBean::default_instance_;
  delete ProtoTaskBean_reflection_;
  delete ProtoNodeMetricsBean::default_instance_;
  delete ProtoNodeMetricsBean_reflection_;
  delete ProtoNodeBean::default_instance_;
  delete ProtoNodeBean_reflection_;
}

void protobuf_AddDesc_ClientMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ClientMessages.proto\0227org.gridgain.gri"
    "d.kernal.processors.rest.client.message\""
    "y\n\rObjectWrapper\022X\n\004type\030\001 \002(\0162J.org.gri"
    "dgain.grid.kernal.processors.rest.client"
    ".message.ObjectWrapperType\022\016\n\006binary\030\002 \002"
    "(\014\"b\n\nCollection\022T\n\004item\030\001 \003(\0132F.org.gri"
    "dgain.grid.kernal.processors.rest.client"
    ".message.ObjectWrapper\"\266\001\n\010KeyValue\022S\n\003k"
    "ey\030\001 \002(\0132F.org.gridgain.grid.kernal.proc"
    "essors.rest.client.message.ObjectWrapper"
    "\022U\n\005value\030\002 \002(\0132F.org.gridgain.grid.kern"
    "al.processors.rest.client.message.Object"
    "Wrapper\"W\n\003Map\022P\n\005entry\030\001 \003(\0132A.org.grid"
    "gain.grid.kernal.processors.rest.client."
    "message.KeyValue\"2\n\014ProtoRequest\022\014\n\004body"
    "\030\001 \002(\014\022\024\n\014sessionToken\030\002 \001(\014\"y\n\032ProtoAut"
    "henticationRequest\022[\n\013credentials\030\001 \002(\0132"
    "F.org.gridgain.grid.kernal.processors.re"
    "st.client.message.ObjectWrapper\"\225\005\n\021Prot"
    "oCacheRequest\022p\n\toperation\030\003 \002(\0162].org.g"
    "ridgain.grid.kernal.processors.rest.clie"
    "nt.message.ProtoCacheRequest.GridCacheOp"
    "eration\022\021\n\tcacheName\030\004 \001(\t\022S\n\003key\030\005 \001(\0132"
    "F.org.gridgain.grid.kernal.processors.re"
    "st.client.message.ObjectWrapper\022U\n\005value"
    "\030\006 \001(\0132F.org.gridgain.grid.kernal.proces"
    "sors.rest.client.message.ObjectWrapper\022V"
    "\n\006value2\030\007 \001(\0132F.org.gridgain.grid.kerna"
    "l.processors.rest.client.message.ObjectW"
    "rapper\022L\n\006values\030\010 \001(\0132<.org.gridgain.gr"
    "id.kernal.processors.rest.client.message"
    ".Map\022\024\n\014cacheFlagsOn\030\t \001(\005\"\222\001\n\022GridCache"
    "Operation\022\007\n\003PUT\020\001\022\013\n\007PUT_ALL\020\002\022\007\n\003GET\020\003"
    "\022\013\n\007GET_ALL\020\004\022\007\n\003RMV\020\005\022\013\n\007RMV_ALL\020\006\022\013\n\007R"
    "EPLACE\020\010\022\007\n\003CAS\020\t\022\013\n\007METRICS\020\n\022\n\n\006APPEND"
    "\020\013\022\013\n\007PREPEND\020\014\"9\n\017ProtoLogRequest\022\014\n\004pa"
    "th\030\003 \001(\t\022\014\n\004from\030\004 \001(\005\022\n\n\002to\030\005 \001(\005\"~\n\020Pr"
    "otoTaskRequest\022\020\n\010taskName\030\003 \002(\t\022X\n\010argu"
    "ment\030\004 \002(\0132F.org.gridgain.grid.kernal.pr"
    "ocessors.rest.client.message.ObjectWrapp"
    "er\"i\n\024ProtoTopologyRequest\022\031\n\021includeAtt"
    "ributes\030\003 \002(\010\022\026\n\016includeMetrics\030\004 \002(\010\022\016\n"
    "\006nodeId\030\005 \001(\t\022\016\n\006nodeIp\030\006 \001(\t\"\247\001\n\rProtoR"
    "esponse\022\016\n\006status\030\001 \002(\005\022\024\n\014errorMessage\030"
    "\002 \001(\t\022Z\n\nresultBean\030\003 \001(\0132F.org.gridgain"
    ".grid.kernal.processors.rest.client.mess"
    "age.ObjectWrapper\022\024\n\014sessionToken\030\004 \001(\014\""
    "\234\001\n\rProtoTaskBean\022\016\n\006taskId\030\002 \002(\t\022\020\n\010fin"
    "ished\030\003 \002(\010\022Z\n\nresultBean\030\004 \001(\0132F.org.gr"
    "idgain.grid.kernal.processors.rest.clien"
    "t.message.ObjectWrapper\022\r\n\005error\030\005 \001(\t\"\200"
    "\r\n\024ProtoNodeMetricsBean\022\032\n\016lastUpdateTim"
    "e\030\001 \002(\003:\002-1\022\035\n\021maximumActiveJobs\030\002 \002(\005:\002"
    "-1\022\035\n\021currentActiveJobs\030\003 \002(\005:\002-1\022\035\n\021ave"
    "rageActiveJobs\030\004 \002(\002:\002-1\022\036\n\022maximumWaiti"
    "ngJobs\030\005 \002(\005:\002-1\022\036\n\022currentWaitingJobs\030\006"
    " \002(\005:\002-1\022\036\n\022averageWaitingJobs\030\007 \002(\002:\002-1"
    "\022\037\n\023maximumRejectedJobs\030\010 \002(\005:\002-1\022\037\n\023cur"
    "rentRejectedJobs\030\t \002(\005:\002-1\022\037\n\023averageRej"
    "ectedJobs\030\n \002(\002:\002-1\022 \n\024maximumCancelledJ"
    "obs\030\013 \002(\005:\002-1\022 \n\024currentCancelledJobs\030\014 "
    "\002(\005:\002-1\022 \n\024averageCancelledJobs\030\r \002(\002:\002-"
    "1\022\035\n\021totalRejectedJobs\030\016 \002(\005:\002-1\022\036\n\022tota"
    "lCancelledJobs\030\017 \002(\005:\002-1\022\035\n\021totalExecute"
    "dJobs\030\020 \002(\005:\002-1\022\036\n\022maximumJobWaitTime\030\021 "
    "\002(\003:\002-1\022\036\n\022currentJobWaitTime\030\022 \002(\003:\002-1\022"
    "\036\n\022averageJobWaitTime\030\023 \002(\001:\002-1\022!\n\025maxim"
    "umJobExecuteTime\030\024 \002(\003:\002-1\022!\n\025currentJob"
    "ExecuteTime\030\025 \002(\003:\002-1\022!\n\025averageJobExecu"
    "teTime\030\026 \002(\001:\002-1\022\031\n\rtotalIdleTime\030\027 \002(\003:"
    "\002-1\022\033\n\017currentIdleTime\030\030 \002(\003:\002-1\022\025\n\ttota"
    "lCpus\030\031 \002(\005:\002-1\022\032\n\016currentCpuLoad\030\032 \002(\001:"
    "\002-1\022\032\n\016averageCpuLoad\030\033 \002(\001:\002-1\022!\n\025heapM"
    "emoryInitialized\030\034 \002(\003:\002-1\022\032\n\016heapMemory"
    "Used\030\035 \002(\003:\002-1\022\037\n\023heapMemoryCommitted\030\036 "
    "\002(\003:\002-1\022\035\n\021heapMemoryMaximum\030\037 \002(\003:\002-1\022$"
    "\n\030nonHeapMemoryInitialized\030  \002(\003:\002-1\022\035\n\021"
    "nonHeapMemoryUsed\030! \002(\003:\002-1\022\"\n\026nonHeapMe"
    "moryCommitted\030\" \002(\003:\002-1\022 \n\024nonHeapMemory"
    "Maximum\030# \002(\003:\002-1\022\022\n\006upTime\030$ \002(\003:\002-1\022\025\n"
    "\tstartTime\030% \002(\003:\002-1\022\031\n\rnodeStartTime\030& "
    "\002(\003:\002-1\022\036\n\022currentThreadCount\030\' \002(\005:\002-1\022"
    "\036\n\022maximumThreadCount\030( \002(\005:\002-1\022#\n\027total"
    "StartedThreadCount\030) \002(\003:\002-1\022$\n\030currentD"
    "aemonThreadCount\030* \002(\005:\002-1\022\037\n\023fileSystem"
    "FreeSpace\030+ \002(\003:\002-1\022 \n\024fileSystemTotalSp"
    "ace\030, \002(\003:\002-1\022!\n\025fileSystemUsableSpace\030-"
    " \002(\003:\002-1\022\033\n\017lastDataVersion\030. \002(\003:\002-1\022\034\n"
    "\020currentGcCpuLoad\030/ \001(\001:\002-1\022\036\n\022totalExec"
    "utedTasks\0300 \001(\005:\002-1\022\035\n\021sentMessagesCount"
    "\0301 \001(\005:\002-1\022\032\n\016sentBytesCount\0302 \001(\003:\002-1\022!"
    "\n\025receivedMessagesCount\0303 \001(\005:\002-1\022\036\n\022rec"
    "eivedBytesCount\0304 \001(\003:\002-1\"\215\004\n\rProtoNodeB"
    "ean\022\016\n\006nodeId\030\001 \002(\014\022\022\n\ntcpAddress\030\002 \003(\t\022"
    "\024\n\014jettyAddress\030\003 \003(\t\022\017\n\007tcpPort\030\004 \002(\005\022\021"
    "\n\tjettyPort\030\005 \002(\005\022^\n\007metrics\030\006 \001(\0132M.org"
    ".gridgain.grid.kernal.processors.rest.cl"
    "ient.message.ProtoNodeMetricsBean\022P\n\natt"
    "ributes\030\007 \001(\0132<.org.gridgain.grid.kernal"
    ".processors.rest.client.message.Map\022L\n\006c"
    "aches\030\t \001(\0132<.org.gridgain.grid.kernal.p"
    "rocessors.rest.client.message.Map\022\023\n\013tcp"
    "HostName\030\n \003(\t\022\025\n\rjettyHostName\030\013 \003(\t\022\024\n"
    "\014replicaCount\030\r \002(\005\022\\\n\014consistentId\030\016 \002("
    "\0132F.org.gridgain.grid.kernal.processors."
    "rest.client.message.ObjectWrapper*\277\002\n\021Ob"
    "jectWrapperType\022\010\n\004NONE\020\000\022\010\n\004BOOL\020\001\022\010\n\004B"
    "YTE\020\002\022\t\n\005SHORT\020\003\022\t\n\005INT32\020\004\022\t\n\005INT64\020\005\022\t"
    "\n\005FLOAT\020\006\022\n\n\006DOUBLE\020\007\022\t\n\005BYTES\020\010\022\n\n\006STRI"
    "NG\020\t\022\016\n\nCOLLECTION\020\n\022\007\n\003MAP\020\013\022\010\n\004UUID\020\014\022"
    "\020\n\014SERIALIZABLE\020\r\022\021\n\rCACHE_REQUEST\020\024\022\020\n\014"
    "TASK_REQUEST\020\025\022\017\n\013LOG_REQUEST\020\026\022\024\n\020TOPOL"
    "OGY_REQUEST\020\027\022\020\n\014AUTH_REQUEST\020\030\022\014\n\010RESPO"
    "NSE\020(\022\r\n\tNODE_BEAN\020<\022\r\n\tTASK_BEAN\020=B[\n@o"
    "rg.gridgain.grid.kernal.processors.rest."
    "client.message.protobufB\027ClientMessagesP"
    "rotocols", 4648);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClientMessages.proto", &protobuf_RegisterTypes);
  ObjectWrapper::default_instance_ = new ObjectWrapper();
  Collection::default_instance_ = new Collection();
  KeyValue::default_instance_ = new KeyValue();
  Map::default_instance_ = new Map();
  ProtoRequest::default_instance_ = new ProtoRequest();
  ProtoAuthenticationRequest::default_instance_ = new ProtoAuthenticationRequest();
  ProtoCacheRequest::default_instance_ = new ProtoCacheRequest();
  ProtoLogRequest::default_instance_ = new ProtoLogRequest();
  ProtoTaskRequest::default_instance_ = new ProtoTaskRequest();
  ProtoTopologyRequest::default_instance_ = new ProtoTopologyRequest();
  ProtoResponse::default_instance_ = new ProtoResponse();
  ProtoTaskBean::default_instance_ = new ProtoTaskBean();
  ProtoNodeMetricsBean::default_instance_ = new ProtoNodeMetricsBean();
  ProtoNodeBean::default_instance_ = new ProtoNodeBean();
  ObjectWrapper::default_instance_->InitAsDefaultInstance();
  Collection::default_instance_->InitAsDefaultInstance();
  KeyValue::default_instance_->InitAsDefaultInstance();
  Map::default_instance_->InitAsDefaultInstance();
  ProtoRequest::default_instance_->InitAsDefaultInstance();
  ProtoAuthenticationRequest::default_instance_->InitAsDefaultInstance();
  ProtoCacheRequest::default_instance_->InitAsDefaultInstance();
  ProtoLogRequest::default_instance_->InitAsDefaultInstance();
  ProtoTaskRequest::default_instance_->InitAsDefaultInstance();
  ProtoTopologyRequest::default_instance_->InitAsDefaultInstance();
  ProtoResponse::default_instance_->InitAsDefaultInstance();
  ProtoTaskBean::default_instance_->InitAsDefaultInstance();
  ProtoNodeMetricsBean::default_instance_->InitAsDefaultInstance();
  ProtoNodeBean::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientMessages_2eproto {
  StaticDescriptorInitializer_ClientMessages_2eproto() {
    protobuf_AddDesc_ClientMessages_2eproto();
  }
} static_descriptor_initializer_ClientMessages_2eproto_;

const ::google::protobuf::EnumDescriptor* ObjectWrapperType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectWrapperType_descriptor_;
}
bool ObjectWrapperType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 40:
    case 60:
    case 61:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectWrapper::kTypeFieldNumber;
const int ObjectWrapper::kBinaryFieldNumber;
#endif  // !_MSC_VER

ObjectWrapper::ObjectWrapper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectWrapper::InitAsDefaultInstance() {
}

ObjectWrapper::ObjectWrapper(const ObjectWrapper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectWrapper::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectWrapper::~ObjectWrapper() {
  SharedDtor();
}

void ObjectWrapper::SharedDtor() {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_;
  }
  if (this != default_instance_) {
  }
}

void ObjectWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectWrapper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectWrapper_descriptor_;
}

const ObjectWrapper& ObjectWrapper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessages_2eproto();  return *default_instance_;
}

ObjectWrapper* ObjectWrapper::default_instance_ = NULL;

ObjectWrapper* ObjectWrapper::New() const {
  return new ObjectWrapper;
}

void ObjectWrapper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_binary()) {
      if (binary_ != &::google::protobuf::internal::kEmptyString) {
        binary_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapperType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapperType_IsValid(value)) {
            set_type(static_cast< org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapperType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_binary;
        break;
      }
      
      // required bytes binary = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapperType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required bytes binary = 2;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->binary(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectWrapper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapperType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required bytes binary = 2;
  if (has_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->binary(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectWrapper::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapperType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required bytes binary = 2;
    if (has_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectWrapper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectWrapper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectWrapper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectWrapper::MergeFrom(const ObjectWrapper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_binary()) {
      set_binary(from.binary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectWrapper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectWrapper::CopyFrom(const ObjectWrapper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectWrapper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ObjectWrapper::Swap(ObjectWrapper* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(binary_, other->binary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectWrapper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectWrapper_descriptor_;
  metadata.reflection = ObjectWrapper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Collection::kItemFieldNumber;
#endif  // !_MSC_VER

Collection::Collection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Collection::InitAsDefaultInstance() {
}

Collection::Collection(const Collection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Collection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Collection::~Collection() {
  SharedDtor();
}

void Collection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Collection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Collection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Collection_descriptor_;
}

const Collection& Collection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessages_2eproto();  return *default_instance_;
}

Collection* Collection::default_instance_ = NULL;

Collection* Collection::New() const {
  return new Collection;
}

void Collection::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Collection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Collection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Collection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Collection::ByteSize() const {
  int total_size = 0;
  
  // repeated .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Collection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Collection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Collection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Collection::MergeFrom(const Collection& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Collection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collection::CopyFrom(const Collection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collection::IsInitialized() const {
  
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void Collection::Swap(Collection* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Collection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Collection_descriptor_;
  metadata.reflection = Collection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

KeyValue::KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyValue::InitAsDefaultInstance() {
  key_ = const_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper*>(&::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::default_instance());
  value_ = const_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper*>(&::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::default_instance());
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = NULL;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValue::~KeyValue() {
  SharedDtor();
}

void KeyValue::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
    delete value_;
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessages_2eproto();  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New() const {
  return new KeyValue;
}

void KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != NULL) key_->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->key(), output);
  }
  
  // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->key(), target);
  }
  
  // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }
    
    // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      mutable_key()->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::MergeFrom(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map::kEntryFieldNumber;
#endif  // !_MSC_VER

Map::Map()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map::InitAsDefaultInstance() {
}

Map::Map(const Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map::~Map() {
  SharedDtor();
}

void Map::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_descriptor_;
}

const Map& Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessages_2eproto();  return *default_instance_;
}

Map* Map::default_instance_ = NULL;

Map* Map::New() const {
  return new Map;
}

void Map::Clear() {
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org.gridgain.grid.kernal.processors.rest.client.message.KeyValue entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .org.gridgain.grid.kernal.processors.rest.client.message.KeyValue entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .org.gridgain.grid.kernal.processors.rest.client.message.KeyValue entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map::ByteSize() const {
  int total_size = 0;
  
  // repeated .org.gridgain.grid.kernal.processors.rest.client.message.KeyValue entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  
  for (int i = 0; i < entry_size(); i++) {
    if (!this->entry(i).IsInitialized()) return false;
  }
  return true;
}

void Map::Swap(Map* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_descriptor_;
  metadata.reflection = Map_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRequest::kBodyFieldNumber;
const int ProtoRequest::kSessionTokenFieldNumber;
#endif  // !_MSC_VER

ProtoRequest::ProtoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRequest::InitAsDefaultInstance() {
}

ProtoRequest::ProtoRequest(const ProtoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRequest::SharedCtor() {
  _cached_size_ = 0;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sessiontoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRequest::~ProtoRequest() {
  SharedDtor();
}

void ProtoRequest::SharedDtor() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (sessiontoken_ != &::google::protobuf::internal::kEmptyString) {
    delete sessiontoken_;
  }
  if (this != default_instance_) {
  }
}

void ProtoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRequest_descriptor_;
}

const ProtoRequest& ProtoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessages_2eproto();  return *default_instance_;
}

ProtoRequest* ProtoRequest::default_instance_ = NULL;

ProtoRequest* ProtoRequest::New() const {
  return new ProtoRequest;
}

void ProtoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
    if (has_sessiontoken()) {
      if (sessiontoken_ != &::google::protobuf::internal::kEmptyString) {
        sessiontoken_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes body = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sessionToken;
        break;
      }
      
      // optional bytes sessionToken = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sessiontoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes body = 1;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->body(), output);
  }
  
  // optional bytes sessionToken = 2;
  if (has_sessiontoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sessiontoken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes body = 1;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->body(), target);
  }
  
  // optional bytes sessionToken = 2;
  if (has_sessiontoken()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sessiontoken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes body = 1;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }
    
    // optional bytes sessionToken = 2;
    if (has_sessiontoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sessiontoken());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRequest::MergeFrom(const ProtoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_sessiontoken()) {
      set_sessiontoken(from.sessiontoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRequest::CopyFrom(const ProtoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoRequest::Swap(ProtoRequest* other) {
  if (other != this) {
    std::swap(body_, other->body_);
    std::swap(sessiontoken_, other->sessiontoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRequest_descriptor_;
  metadata.reflection = ProtoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAuthenticationRequest::kCredentialsFieldNumber;
#endif  // !_MSC_VER

ProtoAuthenticationRequest::ProtoAuthenticationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAuthenticationRequest::InitAsDefaultInstance() {
  credentials_ = const_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper*>(&::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::default_instance());
}

ProtoAuthenticationRequest::ProtoAuthenticationRequest(const ProtoAuthenticationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAuthenticationRequest::SharedCtor() {
  _cached_size_ = 0;
  credentials_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAuthenticationRequest::~ProtoAuthenticationRequest() {
  SharedDtor();
}

void ProtoAuthenticationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete credentials_;
  }
}

void ProtoAuthenticationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAuthenticationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAuthenticationRequest_descriptor_;
}

const ProtoAuthenticationRequest& ProtoAuthenticationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessages_2eproto();  return *default_instance_;
}

ProtoAuthenticationRequest* ProtoAuthenticationRequest::default_instance_ = NULL;

ProtoAuthenticationRequest* ProtoAuthenticationRequest::New() const {
  return new ProtoAuthenticationRequest;
}

void ProtoAuthenticationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_credentials()) {
      if (credentials_ != NULL) credentials_->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAuthenticationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper credentials = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_credentials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAuthenticationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper credentials = 1;
  if (has_credentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->credentials(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAuthenticationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper credentials = 1;
  if (has_credentials()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->credentials(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAuthenticationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper credentials = 1;
    if (has_credentials()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->credentials());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAuthenticationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAuthenticationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAuthenticationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAuthenticationRequest::MergeFrom(const ProtoAuthenticationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_credentials()) {
      mutable_credentials()->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::MergeFrom(from.credentials());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAuthenticationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAuthenticationRequest::CopyFrom(const ProtoAuthenticationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAuthenticationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_credentials()) {
    if (!this->credentials().IsInitialized()) return false;
  }
  return true;
}

void ProtoAuthenticationRequest::Swap(ProtoAuthenticationRequest* other) {
  if (other != this) {
    std::swap(credentials_, other->credentials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAuthenticationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAuthenticationRequest_descriptor_;
  metadata.reflection = ProtoAuthenticationRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProtoCacheRequest_GridCacheOperation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoCacheRequest_GridCacheOperation_descriptor_;
}
bool ProtoCacheRequest_GridCacheOperation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProtoCacheRequest_GridCacheOperation ProtoCacheRequest::PUT;
const ProtoCacheRequest_GridCacheOperation ProtoCacheRequest::PUT_ALL;
const ProtoCacheRequest_GridCacheOperation ProtoCacheRequest::GET;
const ProtoCacheRequest_GridCacheOperation ProtoCacheRequest::GET_ALL;
const ProtoCacheRequest_GridCacheOperation ProtoCacheRequest::RMV;
const ProtoCacheRequest_GridCacheOperation ProtoCacheRequest::RMV_ALL;
const ProtoCacheRequest_GridCacheOperation ProtoCacheRequest::REPLACE;
const ProtoCacheRequest_GridCacheOperation ProtoCacheRequest::CAS;
const ProtoCacheRequest_GridCacheOperation ProtoCacheRequest::METRICS;
const ProtoCacheRequest_GridCacheOperation ProtoCacheRequest::APPEND;
const ProtoCacheRequest_GridCacheOperation ProtoCacheRequest::PREPEND;
const ProtoCacheRequest_GridCacheOperation ProtoCacheRequest::GridCacheOperation_MIN;
const ProtoCacheRequest_GridCacheOperation ProtoCacheRequest::GridCacheOperation_MAX;
const int ProtoCacheRequest::GridCacheOperation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProtoCacheRequest::kOperationFieldNumber;
const int ProtoCacheRequest::kCacheNameFieldNumber;
const int ProtoCacheRequest::kKeyFieldNumber;
const int ProtoCacheRequest::kValueFieldNumber;
const int ProtoCacheRequest::kValue2FieldNumber;
const int ProtoCacheRequest::kValuesFieldNumber;
const int ProtoCacheRequest::kCacheFlagsOnFieldNumber;
#endif  // !_MSC_VER

ProtoCacheRequest::ProtoCacheRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoCacheRequest::InitAsDefaultInstance() {
  key_ = const_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper*>(&::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::default_instance());
  value_ = const_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper*>(&::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::default_instance());
  value2_ = const_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper*>(&::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::default_instance());
  values_ = const_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::Map*>(&::org::gridgain::grid::kernal::processors::rest::client::message::Map::default_instance());
}

ProtoCacheRequest::ProtoCacheRequest(const ProtoCacheRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoCacheRequest::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  cachename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = NULL;
  value_ = NULL;
  value2_ = NULL;
  values_ = NULL;
  cacheflagson_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoCacheRequest::~ProtoCacheRequest() {
  SharedDtor();
}

void ProtoCacheRequest::SharedDtor() {
  if (cachename_ != &::google::protobuf::internal::kEmptyString) {
    delete cachename_;
  }
  if (this != default_instance_) {
    delete key_;
    delete value_;
    delete value2_;
    delete values_;
  }
}

void ProtoCacheRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoCacheRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoCacheRequest_descriptor_;
}

const ProtoCacheRequest& ProtoCacheRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessages_2eproto();  return *default_instance_;
}

ProtoCacheRequest* ProtoCacheRequest::default_instance_ = NULL;

ProtoCacheRequest* ProtoCacheRequest::New() const {
  return new ProtoCacheRequest;
}

void ProtoCacheRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operation_ = 1;
    if (has_cachename()) {
      if (cachename_ != &::google::protobuf::internal::kEmptyString) {
        cachename_->clear();
      }
    }
    if (has_key()) {
      if (key_ != NULL) key_->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::Clear();
    }
    if (has_value2()) {
      if (value2_ != NULL) value2_->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::Clear();
    }
    if (has_values()) {
      if (values_ != NULL) values_->::org::gridgain::grid::kernal::processors::rest::client::message::Map::Clear();
    }
    cacheflagson_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoCacheRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .org.gridgain.grid.kernal.processors.rest.client.message.ProtoCacheRequest.GridCacheOperation operation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::org::gridgain::grid::kernal::processors::rest::client::message::ProtoCacheRequest_GridCacheOperation_IsValid(value)) {
            set_operation(static_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::ProtoCacheRequest_GridCacheOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cacheName;
        break;
      }
      
      // optional string cacheName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cacheName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cachename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cachename().data(), this->cachename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_key;
        break;
      }
      
      // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_value;
        break;
      }
      
      // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_value2;
        break;
      }
      
      // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper value2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_values;
        break;
      }
      
      // optional .org.gridgain.grid.kernal.processors.rest.client.message.Map values = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cacheFlagsOn;
        break;
      }
      
      // optional int32 cacheFlagsOn = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cacheFlagsOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cacheflagson_)));
          set_has_cacheflagson();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoCacheRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .org.gridgain.grid.kernal.processors.rest.client.message.ProtoCacheRequest.GridCacheOperation operation = 3;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operation(), output);
  }
  
  // optional string cacheName = 4;
  if (has_cachename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cachename().data(), this->cachename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cachename(), output);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper key = 5;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->key(), output);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->value(), output);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper value2 = 7;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->value2(), output);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.Map values = 8;
  if (has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->values(), output);
  }
  
  // optional int32 cacheFlagsOn = 9;
  if (has_cacheflagson()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cacheflagson(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoCacheRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .org.gridgain.grid.kernal.processors.rest.client.message.ProtoCacheRequest.GridCacheOperation operation = 3;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operation(), target);
  }
  
  // optional string cacheName = 4;
  if (has_cachename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cachename().data(), this->cachename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cachename(), target);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper key = 5;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->key(), target);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->value(), target);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper value2 = 7;
  if (has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->value2(), target);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.Map values = 8;
  if (has_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->values(), target);
  }
  
  // optional int32 cacheFlagsOn = 9;
  if (has_cacheflagson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cacheflagson(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoCacheRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .org.gridgain.grid.kernal.processors.rest.client.message.ProtoCacheRequest.GridCacheOperation operation = 3;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }
    
    // optional string cacheName = 4;
    if (has_cachename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cachename());
    }
    
    // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper key = 5;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }
    
    // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }
    
    // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper value2 = 7;
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value2());
    }
    
    // optional .org.gridgain.grid.kernal.processors.rest.client.message.Map values = 8;
    if (has_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values());
    }
    
    // optional int32 cacheFlagsOn = 9;
    if (has_cacheflagson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cacheflagson());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCacheRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoCacheRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoCacheRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoCacheRequest::MergeFrom(const ProtoCacheRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_cachename()) {
      set_cachename(from.cachename());
    }
    if (from.has_key()) {
      mutable_key()->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::MergeFrom(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::MergeFrom(from.value());
    }
    if (from.has_value2()) {
      mutable_value2()->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::MergeFrom(from.value2());
    }
    if (from.has_values()) {
      mutable_values()->::org::gridgain::grid::kernal::processors::rest::client::message::Map::MergeFrom(from.values());
    }
    if (from.has_cacheflagson()) {
      set_cacheflagson(from.cacheflagson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoCacheRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoCacheRequest::CopyFrom(const ProtoCacheRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCacheRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  if (has_value2()) {
    if (!this->value2().IsInitialized()) return false;
  }
  if (has_values()) {
    if (!this->values().IsInitialized()) return false;
  }
  return true;
}

void ProtoCacheRequest::Swap(ProtoCacheRequest* other) {
  if (other != this) {
    std::swap(operation_, other->operation_);
    std::swap(cachename_, other->cachename_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(value2_, other->value2_);
    std::swap(values_, other->values_);
    std::swap(cacheflagson_, other->cacheflagson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoCacheRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoCacheRequest_descriptor_;
  metadata.reflection = ProtoCacheRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLogRequest::kPathFieldNumber;
const int ProtoLogRequest::kFromFieldNumber;
const int ProtoLogRequest::kToFieldNumber;
#endif  // !_MSC_VER

ProtoLogRequest::ProtoLogRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLogRequest::InitAsDefaultInstance() {
}

ProtoLogRequest::ProtoLogRequest(const ProtoLogRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLogRequest::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = 0;
  to_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLogRequest::~ProtoLogRequest() {
  SharedDtor();
}

void ProtoLogRequest::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ProtoLogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLogRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLogRequest_descriptor_;
}

const ProtoLogRequest& ProtoLogRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessages_2eproto();  return *default_instance_;
}

ProtoLogRequest* ProtoLogRequest::default_instance_ = NULL;

ProtoLogRequest* ProtoLogRequest::New() const {
  return new ProtoLogRequest;
}

void ProtoLogRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    from_ = 0;
    to_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_from;
        break;
      }
      
      // optional int32 from = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_to;
        break;
      }
      
      // optional int32 to = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path(), output);
  }
  
  // optional int32 from = 4;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->from(), output);
  }
  
  // optional int32 to = 5;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->to(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLogRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }
  
  // optional int32 from = 4;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->from(), target);
  }
  
  // optional int32 to = 5;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->to(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLogRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional int32 from = 4;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }
    
    // optional int32 to = 5;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLogRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLogRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLogRequest::MergeFrom(const ProtoLogRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLogRequest::CopyFrom(const ProtoLogRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLogRequest::IsInitialized() const {
  
  return true;
}

void ProtoLogRequest::Swap(ProtoLogRequest* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLogRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLogRequest_descriptor_;
  metadata.reflection = ProtoLogRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTaskRequest::kTaskNameFieldNumber;
const int ProtoTaskRequest::kArgumentFieldNumber;
#endif  // !_MSC_VER

ProtoTaskRequest::ProtoTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTaskRequest::InitAsDefaultInstance() {
  argument_ = const_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper*>(&::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::default_instance());
}

ProtoTaskRequest::ProtoTaskRequest(const ProtoTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  argument_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTaskRequest::~ProtoTaskRequest() {
  SharedDtor();
}

void ProtoTaskRequest::SharedDtor() {
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    delete taskname_;
  }
  if (this != default_instance_) {
    delete argument_;
  }
}

void ProtoTaskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTaskRequest_descriptor_;
}

const ProtoTaskRequest& ProtoTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessages_2eproto();  return *default_instance_;
}

ProtoTaskRequest* ProtoTaskRequest::default_instance_ = NULL;

ProtoTaskRequest* ProtoTaskRequest::New() const {
  return new ProtoTaskRequest;
}

void ProtoTaskRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskname()) {
      if (taskname_ != &::google::protobuf::internal::kEmptyString) {
        taskname_->clear();
      }
    }
    if (has_argument()) {
      if (argument_ != NULL) argument_->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskname().data(), this->taskname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_argument;
        break;
      }
      
      // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper argument = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskName = 3;
  if (has_taskname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskname().data(), this->taskname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->taskname(), output);
  }
  
  // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper argument = 4;
  if (has_argument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->argument(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskName = 3;
  if (has_taskname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskname().data(), this->taskname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->taskname(), target);
  }
  
  // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper argument = 4;
  if (has_argument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->argument(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskName = 3;
    if (has_taskname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskname());
    }
    
    // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper argument = 4;
    if (has_argument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->argument());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTaskRequest::MergeFrom(const ProtoTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskname()) {
      set_taskname(from.taskname());
    }
    if (from.has_argument()) {
      mutable_argument()->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::MergeFrom(from.argument());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTaskRequest::CopyFrom(const ProtoTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTaskRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_argument()) {
    if (!this->argument().IsInitialized()) return false;
  }
  return true;
}

void ProtoTaskRequest::Swap(ProtoTaskRequest* other) {
  if (other != this) {
    std::swap(taskname_, other->taskname_);
    std::swap(argument_, other->argument_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTaskRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTaskRequest_descriptor_;
  metadata.reflection = ProtoTaskRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTopologyRequest::kIncludeAttributesFieldNumber;
const int ProtoTopologyRequest::kIncludeMetricsFieldNumber;
const int ProtoTopologyRequest::kNodeIdFieldNumber;
const int ProtoTopologyRequest::kNodeIpFieldNumber;
#endif  // !_MSC_VER

ProtoTopologyRequest::ProtoTopologyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTopologyRequest::InitAsDefaultInstance() {
}

ProtoTopologyRequest::ProtoTopologyRequest(const ProtoTopologyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTopologyRequest::SharedCtor() {
  _cached_size_ = 0;
  includeattributes_ = false;
  includemetrics_ = false;
  nodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nodeip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTopologyRequest::~ProtoTopologyRequest() {
  SharedDtor();
}

void ProtoTopologyRequest::SharedDtor() {
  if (nodeid_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid_;
  }
  if (nodeip_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeip_;
  }
  if (this != default_instance_) {
  }
}

void ProtoTopologyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTopologyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTopologyRequest_descriptor_;
}

const ProtoTopologyRequest& ProtoTopologyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessages_2eproto();  return *default_instance_;
}

ProtoTopologyRequest* ProtoTopologyRequest::default_instance_ = NULL;

ProtoTopologyRequest* ProtoTopologyRequest::New() const {
  return new ProtoTopologyRequest;
}

void ProtoTopologyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    includeattributes_ = false;
    includemetrics_ = false;
    if (has_nodeid()) {
      if (nodeid_ != &::google::protobuf::internal::kEmptyString) {
        nodeid_->clear();
      }
    }
    if (has_nodeip()) {
      if (nodeip_ != &::google::protobuf::internal::kEmptyString) {
        nodeip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTopologyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool includeAttributes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includeattributes_)));
          set_has_includeattributes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_includeMetrics;
        break;
      }
      
      // required bool includeMetrics = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_includeMetrics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includemetrics_)));
          set_has_includemetrics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nodeId;
        break;
      }
      
      // optional string nodeId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeid().data(), this->nodeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nodeIp;
        break;
      }
      
      // optional string nodeIp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeip().data(), this->nodeip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTopologyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool includeAttributes = 3;
  if (has_includeattributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->includeattributes(), output);
  }
  
  // required bool includeMetrics = 4;
  if (has_includemetrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->includemetrics(), output);
  }
  
  // optional string nodeId = 5;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nodeid(), output);
  }
  
  // optional string nodeIp = 6;
  if (has_nodeip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeip().data(), this->nodeip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nodeip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTopologyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool includeAttributes = 3;
  if (has_includeattributes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->includeattributes(), target);
  }
  
  // required bool includeMetrics = 4;
  if (has_includemetrics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->includemetrics(), target);
  }
  
  // optional string nodeId = 5;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nodeid(), target);
  }
  
  // optional string nodeIp = 6;
  if (has_nodeip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeip().data(), this->nodeip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nodeip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTopologyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool includeAttributes = 3;
    if (has_includeattributes()) {
      total_size += 1 + 1;
    }
    
    // required bool includeMetrics = 4;
    if (has_includemetrics()) {
      total_size += 1 + 1;
    }
    
    // optional string nodeId = 5;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeid());
    }
    
    // optional string nodeIp = 6;
    if (has_nodeip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTopologyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTopologyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTopologyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTopologyRequest::MergeFrom(const ProtoTopologyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_includeattributes()) {
      set_includeattributes(from.includeattributes());
    }
    if (from.has_includemetrics()) {
      set_includemetrics(from.includemetrics());
    }
    if (from.has_nodeid()) {
      set_nodeid(from.nodeid());
    }
    if (from.has_nodeip()) {
      set_nodeip(from.nodeip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTopologyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTopologyRequest::CopyFrom(const ProtoTopologyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTopologyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ProtoTopologyRequest::Swap(ProtoTopologyRequest* other) {
  if (other != this) {
    std::swap(includeattributes_, other->includeattributes_);
    std::swap(includemetrics_, other->includemetrics_);
    std::swap(nodeid_, other->nodeid_);
    std::swap(nodeip_, other->nodeip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTopologyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTopologyRequest_descriptor_;
  metadata.reflection = ProtoTopologyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoResponse::kStatusFieldNumber;
const int ProtoResponse::kErrorMessageFieldNumber;
const int ProtoResponse::kResultBeanFieldNumber;
const int ProtoResponse::kSessionTokenFieldNumber;
#endif  // !_MSC_VER

ProtoResponse::ProtoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoResponse::InitAsDefaultInstance() {
  resultbean_ = const_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper*>(&::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::default_instance());
}

ProtoResponse::ProtoResponse(const ProtoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resultbean_ = NULL;
  sessiontoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoResponse::~ProtoResponse() {
  SharedDtor();
}

void ProtoResponse::SharedDtor() {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (sessiontoken_ != &::google::protobuf::internal::kEmptyString) {
    delete sessiontoken_;
  }
  if (this != default_instance_) {
    delete resultbean_;
  }
}

void ProtoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoResponse_descriptor_;
}

const ProtoResponse& ProtoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessages_2eproto();  return *default_instance_;
}

ProtoResponse* ProtoResponse::default_instance_ = NULL;

ProtoResponse* ProtoResponse::New() const {
  return new ProtoResponse;
}

void ProtoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
        errormessage_->clear();
      }
    }
    if (has_resultbean()) {
      if (resultbean_ != NULL) resultbean_->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::Clear();
    }
    if (has_sessiontoken()) {
      if (sessiontoken_ != &::google::protobuf::internal::kEmptyString) {
        sessiontoken_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errorMessage;
        break;
      }
      
      // optional string errorMessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resultBean;
        break;
      }
      
      // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper resultBean = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resultBean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resultbean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sessionToken;
        break;
      }
      
      // optional bytes sessionToken = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sessiontoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }
  
  // optional string errorMessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errormessage(), output);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper resultBean = 3;
  if (has_resultbean()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resultbean(), output);
  }
  
  // optional bytes sessionToken = 4;
  if (has_sessiontoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sessiontoken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }
  
  // optional string errorMessage = 2;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormessage(), target);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper resultBean = 3;
  if (has_resultbean()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resultbean(), target);
  }
  
  // optional bytes sessionToken = 4;
  if (has_sessiontoken()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sessiontoken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional string errorMessage = 2;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }
    
    // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper resultBean = 3;
    if (has_resultbean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resultbean());
    }
    
    // optional bytes sessionToken = 4;
    if (has_sessiontoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sessiontoken());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoResponse::MergeFrom(const ProtoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
    if (from.has_resultbean()) {
      mutable_resultbean()->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::MergeFrom(from.resultbean());
    }
    if (from.has_sessiontoken()) {
      set_sessiontoken(from.sessiontoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoResponse::CopyFrom(const ProtoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_resultbean()) {
    if (!this->resultbean().IsInitialized()) return false;
  }
  return true;
}

void ProtoResponse::Swap(ProtoResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(errormessage_, other->errormessage_);
    std::swap(resultbean_, other->resultbean_);
    std::swap(sessiontoken_, other->sessiontoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoResponse_descriptor_;
  metadata.reflection = ProtoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTaskBean::kTaskIdFieldNumber;
const int ProtoTaskBean::kFinishedFieldNumber;
const int ProtoTaskBean::kResultBeanFieldNumber;
const int ProtoTaskBean::kErrorFieldNumber;
#endif  // !_MSC_VER

ProtoTaskBean::ProtoTaskBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTaskBean::InitAsDefaultInstance() {
  resultbean_ = const_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper*>(&::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::default_instance());
}

ProtoTaskBean::ProtoTaskBean(const ProtoTaskBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTaskBean::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  finished_ = false;
  resultbean_ = NULL;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTaskBean::~ProtoTaskBean() {
  SharedDtor();
}

void ProtoTaskBean::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
    delete resultbean_;
  }
}

void ProtoTaskBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTaskBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTaskBean_descriptor_;
}

const ProtoTaskBean& ProtoTaskBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessages_2eproto();  return *default_instance_;
}

ProtoTaskBean* ProtoTaskBean::default_instance_ = NULL;

ProtoTaskBean* ProtoTaskBean::New() const {
  return new ProtoTaskBean;
}

void ProtoTaskBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    finished_ = false;
    if (has_resultbean()) {
      if (resultbean_ != NULL) resultbean_->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::Clear();
    }
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTaskBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finished;
        break;
      }
      
      // required bool finished = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
          set_has_finished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resultBean;
        break;
      }
      
      // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper resultBean = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resultBean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resultbean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }
      
      // optional string error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTaskBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskId = 2;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->taskid(), output);
  }
  
  // required bool finished = 3;
  if (has_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->finished(), output);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper resultBean = 4;
  if (has_resultbean()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->resultbean(), output);
  }
  
  // optional string error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTaskBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskId = 2;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->taskid(), target);
  }
  
  // required bool finished = 3;
  if (has_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->finished(), target);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper resultBean = 4;
  if (has_resultbean()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->resultbean(), target);
  }
  
  // optional string error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTaskBean::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskId = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }
    
    // required bool finished = 3;
    if (has_finished()) {
      total_size += 1 + 1;
    }
    
    // optional .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper resultBean = 4;
    if (has_resultbean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resultbean());
    }
    
    // optional string error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTaskBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTaskBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTaskBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTaskBean::MergeFrom(const ProtoTaskBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_finished()) {
      set_finished(from.finished());
    }
    if (from.has_resultbean()) {
      mutable_resultbean()->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::MergeFrom(from.resultbean());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTaskBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTaskBean::CopyFrom(const ProtoTaskBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTaskBean::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_resultbean()) {
    if (!this->resultbean().IsInitialized()) return false;
  }
  return true;
}

void ProtoTaskBean::Swap(ProtoTaskBean* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(finished_, other->finished_);
    std::swap(resultbean_, other->resultbean_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTaskBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTaskBean_descriptor_;
  metadata.reflection = ProtoTaskBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoNodeMetricsBean::kLastUpdateTimeFieldNumber;
const int ProtoNodeMetricsBean::kMaximumActiveJobsFieldNumber;
const int ProtoNodeMetricsBean::kCurrentActiveJobsFieldNumber;
const int ProtoNodeMetricsBean::kAverageActiveJobsFieldNumber;
const int ProtoNodeMetricsBean::kMaximumWaitingJobsFieldNumber;
const int ProtoNodeMetricsBean::kCurrentWaitingJobsFieldNumber;
const int ProtoNodeMetricsBean::kAverageWaitingJobsFieldNumber;
const int ProtoNodeMetricsBean::kMaximumRejectedJobsFieldNumber;
const int ProtoNodeMetricsBean::kCurrentRejectedJobsFieldNumber;
const int ProtoNodeMetricsBean::kAverageRejectedJobsFieldNumber;
const int ProtoNodeMetricsBean::kMaximumCancelledJobsFieldNumber;
const int ProtoNodeMetricsBean::kCurrentCancelledJobsFieldNumber;
const int ProtoNodeMetricsBean::kAverageCancelledJobsFieldNumber;
const int ProtoNodeMetricsBean::kTotalRejectedJobsFieldNumber;
const int ProtoNodeMetricsBean::kTotalCancelledJobsFieldNumber;
const int ProtoNodeMetricsBean::kTotalExecutedJobsFieldNumber;
const int ProtoNodeMetricsBean::kMaximumJobWaitTimeFieldNumber;
const int ProtoNodeMetricsBean::kCurrentJobWaitTimeFieldNumber;
const int ProtoNodeMetricsBean::kAverageJobWaitTimeFieldNumber;
const int ProtoNodeMetricsBean::kMaximumJobExecuteTimeFieldNumber;
const int ProtoNodeMetricsBean::kCurrentJobExecuteTimeFieldNumber;
const int ProtoNodeMetricsBean::kAverageJobExecuteTimeFieldNumber;
const int ProtoNodeMetricsBean::kTotalIdleTimeFieldNumber;
const int ProtoNodeMetricsBean::kCurrentIdleTimeFieldNumber;
const int ProtoNodeMetricsBean::kTotalCpusFieldNumber;
const int ProtoNodeMetricsBean::kCurrentCpuLoadFieldNumber;
const int ProtoNodeMetricsBean::kAverageCpuLoadFieldNumber;
const int ProtoNodeMetricsBean::kHeapMemoryInitializedFieldNumber;
const int ProtoNodeMetricsBean::kHeapMemoryUsedFieldNumber;
const int ProtoNodeMetricsBean::kHeapMemoryCommittedFieldNumber;
const int ProtoNodeMetricsBean::kHeapMemoryMaximumFieldNumber;
const int ProtoNodeMetricsBean::kNonHeapMemoryInitializedFieldNumber;
const int ProtoNodeMetricsBean::kNonHeapMemoryUsedFieldNumber;
const int ProtoNodeMetricsBean::kNonHeapMemoryCommittedFieldNumber;
const int ProtoNodeMetricsBean::kNonHeapMemoryMaximumFieldNumber;
const int ProtoNodeMetricsBean::kUpTimeFieldNumber;
const int ProtoNodeMetricsBean::kStartTimeFieldNumber;
const int ProtoNodeMetricsBean::kNodeStartTimeFieldNumber;
const int ProtoNodeMetricsBean::kCurrentThreadCountFieldNumber;
const int ProtoNodeMetricsBean::kMaximumThreadCountFieldNumber;
const int ProtoNodeMetricsBean::kTotalStartedThreadCountFieldNumber;
const int ProtoNodeMetricsBean::kCurrentDaemonThreadCountFieldNumber;
const int ProtoNodeMetricsBean::kFileSystemFreeSpaceFieldNumber;
const int ProtoNodeMetricsBean::kFileSystemTotalSpaceFieldNumber;
const int ProtoNodeMetricsBean::kFileSystemUsableSpaceFieldNumber;
const int ProtoNodeMetricsBean::kLastDataVersionFieldNumber;
const int ProtoNodeMetricsBean::kCurrentGcCpuLoadFieldNumber;
const int ProtoNodeMetricsBean::kTotalExecutedTasksFieldNumber;
const int ProtoNodeMetricsBean::kSentMessagesCountFieldNumber;
const int ProtoNodeMetricsBean::kSentBytesCountFieldNumber;
const int ProtoNodeMetricsBean::kReceivedMessagesCountFieldNumber;
const int ProtoNodeMetricsBean::kReceivedBytesCountFieldNumber;
#endif  // !_MSC_VER

ProtoNodeMetricsBean::ProtoNodeMetricsBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoNodeMetricsBean::InitAsDefaultInstance() {
}

ProtoNodeMetricsBean::ProtoNodeMetricsBean(const ProtoNodeMetricsBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoNodeMetricsBean::SharedCtor() {
  _cached_size_ = 0;
  lastupdatetime_ = GOOGLE_LONGLONG(-1);
  maximumactivejobs_ = -1;
  currentactivejobs_ = -1;
  averageactivejobs_ = -1;
  maximumwaitingjobs_ = -1;
  currentwaitingjobs_ = -1;
  averagewaitingjobs_ = -1;
  maximumrejectedjobs_ = -1;
  currentrejectedjobs_ = -1;
  averagerejectedjobs_ = -1;
  maximumcancelledjobs_ = -1;
  currentcancelledjobs_ = -1;
  averagecancelledjobs_ = -1;
  totalrejectedjobs_ = -1;
  totalcancelledjobs_ = -1;
  totalexecutedjobs_ = -1;
  maximumjobwaittime_ = GOOGLE_LONGLONG(-1);
  currentjobwaittime_ = GOOGLE_LONGLONG(-1);
  averagejobwaittime_ = -1;
  maximumjobexecutetime_ = GOOGLE_LONGLONG(-1);
  currentjobexecutetime_ = GOOGLE_LONGLONG(-1);
  averagejobexecutetime_ = -1;
  totalidletime_ = GOOGLE_LONGLONG(-1);
  currentidletime_ = GOOGLE_LONGLONG(-1);
  totalcpus_ = -1;
  currentcpuload_ = -1;
  averagecpuload_ = -1;
  heapmemoryinitialized_ = GOOGLE_LONGLONG(-1);
  heapmemoryused_ = GOOGLE_LONGLONG(-1);
  heapmemorycommitted_ = GOOGLE_LONGLONG(-1);
  heapmemorymaximum_ = GOOGLE_LONGLONG(-1);
  nonheapmemoryinitialized_ = GOOGLE_LONGLONG(-1);
  nonheapmemoryused_ = GOOGLE_LONGLONG(-1);
  nonheapmemorycommitted_ = GOOGLE_LONGLONG(-1);
  nonheapmemorymaximum_ = GOOGLE_LONGLONG(-1);
  uptime_ = GOOGLE_LONGLONG(-1);
  starttime_ = GOOGLE_LONGLONG(-1);
  nodestarttime_ = GOOGLE_LONGLONG(-1);
  currentthreadcount_ = -1;
  maximumthreadcount_ = -1;
  totalstartedthreadcount_ = GOOGLE_LONGLONG(-1);
  currentdaemonthreadcount_ = -1;
  filesystemfreespace_ = GOOGLE_LONGLONG(-1);
  filesystemtotalspace_ = GOOGLE_LONGLONG(-1);
  filesystemusablespace_ = GOOGLE_LONGLONG(-1);
  lastdataversion_ = GOOGLE_LONGLONG(-1);
  currentgccpuload_ = -1;
  totalexecutedtasks_ = -1;
  sentmessagescount_ = -1;
  sentbytescount_ = GOOGLE_LONGLONG(-1);
  receivedmessagescount_ = -1;
  receivedbytescount_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoNodeMetricsBean::~ProtoNodeMetricsBean() {
  SharedDtor();
}

void ProtoNodeMetricsBean::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoNodeMetricsBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoNodeMetricsBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoNodeMetricsBean_descriptor_;
}

const ProtoNodeMetricsBean& ProtoNodeMetricsBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessages_2eproto();  return *default_instance_;
}

ProtoNodeMetricsBean* ProtoNodeMetricsBean::default_instance_ = NULL;

ProtoNodeMetricsBean* ProtoNodeMetricsBean::New() const {
  return new ProtoNodeMetricsBean;
}

void ProtoNodeMetricsBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lastupdatetime_ = GOOGLE_LONGLONG(-1);
    maximumactivejobs_ = -1;
    currentactivejobs_ = -1;
    averageactivejobs_ = -1;
    maximumwaitingjobs_ = -1;
    currentwaitingjobs_ = -1;
    averagewaitingjobs_ = -1;
    maximumrejectedjobs_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    currentrejectedjobs_ = -1;
    averagerejectedjobs_ = -1;
    maximumcancelledjobs_ = -1;
    currentcancelledjobs_ = -1;
    averagecancelledjobs_ = -1;
    totalrejectedjobs_ = -1;
    totalcancelledjobs_ = -1;
    totalexecutedjobs_ = -1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    maximumjobwaittime_ = GOOGLE_LONGLONG(-1);
    currentjobwaittime_ = GOOGLE_LONGLONG(-1);
    averagejobwaittime_ = -1;
    maximumjobexecutetime_ = GOOGLE_LONGLONG(-1);
    currentjobexecutetime_ = GOOGLE_LONGLONG(-1);
    averagejobexecutetime_ = -1;
    totalidletime_ = GOOGLE_LONGLONG(-1);
    currentidletime_ = GOOGLE_LONGLONG(-1);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    totalcpus_ = -1;
    currentcpuload_ = -1;
    averagecpuload_ = -1;
    heapmemoryinitialized_ = GOOGLE_LONGLONG(-1);
    heapmemoryused_ = GOOGLE_LONGLONG(-1);
    heapmemorycommitted_ = GOOGLE_LONGLONG(-1);
    heapmemorymaximum_ = GOOGLE_LONGLONG(-1);
    nonheapmemoryinitialized_ = GOOGLE_LONGLONG(-1);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    nonheapmemoryused_ = GOOGLE_LONGLONG(-1);
    nonheapmemorycommitted_ = GOOGLE_LONGLONG(-1);
    nonheapmemorymaximum_ = GOOGLE_LONGLONG(-1);
    uptime_ = GOOGLE_LONGLONG(-1);
    starttime_ = GOOGLE_LONGLONG(-1);
    nodestarttime_ = GOOGLE_LONGLONG(-1);
    currentthreadcount_ = -1;
    maximumthreadcount_ = -1;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    totalstartedthreadcount_ = GOOGLE_LONGLONG(-1);
    currentdaemonthreadcount_ = -1;
    filesystemfreespace_ = GOOGLE_LONGLONG(-1);
    filesystemtotalspace_ = GOOGLE_LONGLONG(-1);
    filesystemusablespace_ = GOOGLE_LONGLONG(-1);
    lastdataversion_ = GOOGLE_LONGLONG(-1);
    currentgccpuload_ = -1;
    totalexecutedtasks_ = -1;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    sentmessagescount_ = -1;
    sentbytescount_ = GOOGLE_LONGLONG(-1);
    receivedmessagescount_ = -1;
    receivedbytescount_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoNodeMetricsBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lastUpdateTime = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastupdatetime_)));
          set_has_lastupdatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maximumActiveJobs;
        break;
      }
      
      // required int32 maximumActiveJobs = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maximumActiveJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximumactivejobs_)));
          set_has_maximumactivejobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currentActiveJobs;
        break;
      }
      
      // required int32 currentActiveJobs = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentActiveJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentactivejobs_)));
          set_has_currentactivejobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_averageActiveJobs;
        break;
      }
      
      // required float averageActiveJobs = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_averageActiveJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &averageactivejobs_)));
          set_has_averageactivejobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maximumWaitingJobs;
        break;
      }
      
      // required int32 maximumWaitingJobs = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maximumWaitingJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximumwaitingjobs_)));
          set_has_maximumwaitingjobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_currentWaitingJobs;
        break;
      }
      
      // required int32 currentWaitingJobs = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentWaitingJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentwaitingjobs_)));
          set_has_currentwaitingjobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_averageWaitingJobs;
        break;
      }
      
      // required float averageWaitingJobs = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_averageWaitingJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &averagewaitingjobs_)));
          set_has_averagewaitingjobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maximumRejectedJobs;
        break;
      }
      
      // required int32 maximumRejectedJobs = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maximumRejectedJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximumrejectedjobs_)));
          set_has_maximumrejectedjobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_currentRejectedJobs;
        break;
      }
      
      // required int32 currentRejectedJobs = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentRejectedJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentrejectedjobs_)));
          set_has_currentrejectedjobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_averageRejectedJobs;
        break;
      }
      
      // required float averageRejectedJobs = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_averageRejectedJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &averagerejectedjobs_)));
          set_has_averagerejectedjobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_maximumCancelledJobs;
        break;
      }
      
      // required int32 maximumCancelledJobs = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maximumCancelledJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximumcancelledjobs_)));
          set_has_maximumcancelledjobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_currentCancelledJobs;
        break;
      }
      
      // required int32 currentCancelledJobs = 12 [default = -1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentCancelledJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentcancelledjobs_)));
          set_has_currentcancelledjobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_averageCancelledJobs;
        break;
      }
      
      // required float averageCancelledJobs = 13 [default = -1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_averageCancelledJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &averagecancelledjobs_)));
          set_has_averagecancelledjobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_totalRejectedJobs;
        break;
      }
      
      // required int32 totalRejectedJobs = 14 [default = -1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalRejectedJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalrejectedjobs_)));
          set_has_totalrejectedjobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_totalCancelledJobs;
        break;
      }
      
      // required int32 totalCancelledJobs = 15 [default = -1];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalCancelledJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcancelledjobs_)));
          set_has_totalcancelledjobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_totalExecutedJobs;
        break;
      }
      
      // required int32 totalExecutedJobs = 16 [default = -1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalExecutedJobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalexecutedjobs_)));
          set_has_totalexecutedjobs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_maximumJobWaitTime;
        break;
      }
      
      // required int64 maximumJobWaitTime = 17 [default = -1];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maximumJobWaitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maximumjobwaittime_)));
          set_has_maximumjobwaittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_currentJobWaitTime;
        break;
      }
      
      // required int64 currentJobWaitTime = 18 [default = -1];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentJobWaitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currentjobwaittime_)));
          set_has_currentjobwaittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_averageJobWaitTime;
        break;
      }
      
      // required double averageJobWaitTime = 19 [default = -1];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_averageJobWaitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averagejobwaittime_)));
          set_has_averagejobwaittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_maximumJobExecuteTime;
        break;
      }
      
      // required int64 maximumJobExecuteTime = 20 [default = -1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maximumJobExecuteTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maximumjobexecutetime_)));
          set_has_maximumjobexecutetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_currentJobExecuteTime;
        break;
      }
      
      // required int64 currentJobExecuteTime = 21 [default = -1];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentJobExecuteTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currentjobexecutetime_)));
          set_has_currentjobexecutetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_averageJobExecuteTime;
        break;
      }
      
      // required double averageJobExecuteTime = 22 [default = -1];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_averageJobExecuteTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averagejobexecutetime_)));
          set_has_averagejobexecutetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_totalIdleTime;
        break;
      }
      
      // required int64 totalIdleTime = 23 [default = -1];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalIdleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalidletime_)));
          set_has_totalidletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_currentIdleTime;
        break;
      }
      
      // required int64 currentIdleTime = 24 [default = -1];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentIdleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currentidletime_)));
          set_has_currentidletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_totalCpus;
        break;
      }
      
      // required int32 totalCpus = 25 [default = -1];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalCpus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcpus_)));
          set_has_totalcpus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_currentCpuLoad;
        break;
      }
      
      // required double currentCpuLoad = 26 [default = -1];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_currentCpuLoad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currentcpuload_)));
          set_has_currentcpuload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_averageCpuLoad;
        break;
      }
      
      // required double averageCpuLoad = 27 [default = -1];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_averageCpuLoad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averagecpuload_)));
          set_has_averagecpuload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_heapMemoryInitialized;
        break;
      }
      
      // required int64 heapMemoryInitialized = 28 [default = -1];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heapMemoryInitialized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heapmemoryinitialized_)));
          set_has_heapmemoryinitialized();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_heapMemoryUsed;
        break;
      }
      
      // required int64 heapMemoryUsed = 29 [default = -1];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heapMemoryUsed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heapmemoryused_)));
          set_has_heapmemoryused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_heapMemoryCommitted;
        break;
      }
      
      // required int64 heapMemoryCommitted = 30 [default = -1];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heapMemoryCommitted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heapmemorycommitted_)));
          set_has_heapmemorycommitted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_heapMemoryMaximum;
        break;
      }
      
      // required int64 heapMemoryMaximum = 31 [default = -1];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heapMemoryMaximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heapmemorymaximum_)));
          set_has_heapmemorymaximum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_nonHeapMemoryInitialized;
        break;
      }
      
      // required int64 nonHeapMemoryInitialized = 32 [default = -1];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonHeapMemoryInitialized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nonheapmemoryinitialized_)));
          set_has_nonheapmemoryinitialized();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_nonHeapMemoryUsed;
        break;
      }
      
      // required int64 nonHeapMemoryUsed = 33 [default = -1];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonHeapMemoryUsed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nonheapmemoryused_)));
          set_has_nonheapmemoryused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_nonHeapMemoryCommitted;
        break;
      }
      
      // required int64 nonHeapMemoryCommitted = 34 [default = -1];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonHeapMemoryCommitted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nonheapmemorycommitted_)));
          set_has_nonheapmemorycommitted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_nonHeapMemoryMaximum;
        break;
      }
      
      // required int64 nonHeapMemoryMaximum = 35 [default = -1];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonHeapMemoryMaximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nonheapmemorymaximum_)));
          set_has_nonheapmemorymaximum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_upTime;
        break;
      }
      
      // required int64 upTime = 36 [default = -1];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uptime_)));
          set_has_uptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_startTime;
        break;
      }
      
      // required int64 startTime = 37 [default = -1];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_nodeStartTime;
        break;
      }
      
      // required int64 nodeStartTime = 38 [default = -1];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nodeStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nodestarttime_)));
          set_has_nodestarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_currentThreadCount;
        break;
      }
      
      // required int32 currentThreadCount = 39 [default = -1];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentThreadCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentthreadcount_)));
          set_has_currentthreadcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_maximumThreadCount;
        break;
      }
      
      // required int32 maximumThreadCount = 40 [default = -1];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maximumThreadCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximumthreadcount_)));
          set_has_maximumthreadcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_totalStartedThreadCount;
        break;
      }
      
      // required int64 totalStartedThreadCount = 41 [default = -1];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalStartedThreadCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalstartedthreadcount_)));
          set_has_totalstartedthreadcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_currentDaemonThreadCount;
        break;
      }
      
      // required int32 currentDaemonThreadCount = 42 [default = -1];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentDaemonThreadCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentdaemonthreadcount_)));
          set_has_currentdaemonthreadcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_fileSystemFreeSpace;
        break;
      }
      
      // required int64 fileSystemFreeSpace = 43 [default = -1];
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileSystemFreeSpace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filesystemfreespace_)));
          set_has_filesystemfreespace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_fileSystemTotalSpace;
        break;
      }
      
      // required int64 fileSystemTotalSpace = 44 [default = -1];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileSystemTotalSpace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filesystemtotalspace_)));
          set_has_filesystemtotalspace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_fileSystemUsableSpace;
        break;
      }
      
      // required int64 fileSystemUsableSpace = 45 [default = -1];
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileSystemUsableSpace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filesystemusablespace_)));
          set_has_filesystemusablespace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_lastDataVersion;
        break;
      }
      
      // required int64 lastDataVersion = 46 [default = -1];
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastDataVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastdataversion_)));
          set_has_lastdataversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(377)) goto parse_currentGcCpuLoad;
        break;
      }
      
      // optional double currentGcCpuLoad = 47 [default = -1];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_currentGcCpuLoad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currentgccpuload_)));
          set_has_currentgccpuload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_totalExecutedTasks;
        break;
      }
      
      // optional int32 totalExecutedTasks = 48 [default = -1];
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalExecutedTasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalexecutedtasks_)));
          set_has_totalexecutedtasks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_sentMessagesCount;
        break;
      }
      
      // optional int32 sentMessagesCount = 49 [default = -1];
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sentMessagesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sentmessagescount_)));
          set_has_sentmessagescount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_sentBytesCount;
        break;
      }
      
      // optional int64 sentBytesCount = 50 [default = -1];
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sentBytesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sentbytescount_)));
          set_has_sentbytescount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_receivedMessagesCount;
        break;
      }
      
      // optional int32 receivedMessagesCount = 51 [default = -1];
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedMessagesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receivedmessagescount_)));
          set_has_receivedmessagescount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_receivedBytesCount;
        break;
      }
      
      // optional int64 receivedBytesCount = 52 [default = -1];
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedBytesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivedbytescount_)));
          set_has_receivedbytescount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoNodeMetricsBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 lastUpdateTime = 1 [default = -1];
  if (has_lastupdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lastupdatetime(), output);
  }
  
  // required int32 maximumActiveJobs = 2 [default = -1];
  if (has_maximumactivejobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maximumactivejobs(), output);
  }
  
  // required int32 currentActiveJobs = 3 [default = -1];
  if (has_currentactivejobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currentactivejobs(), output);
  }
  
  // required float averageActiveJobs = 4 [default = -1];
  if (has_averageactivejobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->averageactivejobs(), output);
  }
  
  // required int32 maximumWaitingJobs = 5 [default = -1];
  if (has_maximumwaitingjobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maximumwaitingjobs(), output);
  }
  
  // required int32 currentWaitingJobs = 6 [default = -1];
  if (has_currentwaitingjobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currentwaitingjobs(), output);
  }
  
  // required float averageWaitingJobs = 7 [default = -1];
  if (has_averagewaitingjobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->averagewaitingjobs(), output);
  }
  
  // required int32 maximumRejectedJobs = 8 [default = -1];
  if (has_maximumrejectedjobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maximumrejectedjobs(), output);
  }
  
  // required int32 currentRejectedJobs = 9 [default = -1];
  if (has_currentrejectedjobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->currentrejectedjobs(), output);
  }
  
  // required float averageRejectedJobs = 10 [default = -1];
  if (has_averagerejectedjobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->averagerejectedjobs(), output);
  }
  
  // required int32 maximumCancelledJobs = 11 [default = -1];
  if (has_maximumcancelledjobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->maximumcancelledjobs(), output);
  }
  
  // required int32 currentCancelledJobs = 12 [default = -1];
  if (has_currentcancelledjobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->currentcancelledjobs(), output);
  }
  
  // required float averageCancelledJobs = 13 [default = -1];
  if (has_averagecancelledjobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->averagecancelledjobs(), output);
  }
  
  // required int32 totalRejectedJobs = 14 [default = -1];
  if (has_totalrejectedjobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->totalrejectedjobs(), output);
  }
  
  // required int32 totalCancelledJobs = 15 [default = -1];
  if (has_totalcancelledjobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->totalcancelledjobs(), output);
  }
  
  // required int32 totalExecutedJobs = 16 [default = -1];
  if (has_totalexecutedjobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->totalexecutedjobs(), output);
  }
  
  // required int64 maximumJobWaitTime = 17 [default = -1];
  if (has_maximumjobwaittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->maximumjobwaittime(), output);
  }
  
  // required int64 currentJobWaitTime = 18 [default = -1];
  if (has_currentjobwaittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->currentjobwaittime(), output);
  }
  
  // required double averageJobWaitTime = 19 [default = -1];
  if (has_averagejobwaittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->averagejobwaittime(), output);
  }
  
  // required int64 maximumJobExecuteTime = 20 [default = -1];
  if (has_maximumjobexecutetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->maximumjobexecutetime(), output);
  }
  
  // required int64 currentJobExecuteTime = 21 [default = -1];
  if (has_currentjobexecutetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->currentjobexecutetime(), output);
  }
  
  // required double averageJobExecuteTime = 22 [default = -1];
  if (has_averagejobexecutetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->averagejobexecutetime(), output);
  }
  
  // required int64 totalIdleTime = 23 [default = -1];
  if (has_totalidletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->totalidletime(), output);
  }
  
  // required int64 currentIdleTime = 24 [default = -1];
  if (has_currentidletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->currentidletime(), output);
  }
  
  // required int32 totalCpus = 25 [default = -1];
  if (has_totalcpus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->totalcpus(), output);
  }
  
  // required double currentCpuLoad = 26 [default = -1];
  if (has_currentcpuload()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->currentcpuload(), output);
  }
  
  // required double averageCpuLoad = 27 [default = -1];
  if (has_averagecpuload()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->averagecpuload(), output);
  }
  
  // required int64 heapMemoryInitialized = 28 [default = -1];
  if (has_heapmemoryinitialized()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->heapmemoryinitialized(), output);
  }
  
  // required int64 heapMemoryUsed = 29 [default = -1];
  if (has_heapmemoryused()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->heapmemoryused(), output);
  }
  
  // required int64 heapMemoryCommitted = 30 [default = -1];
  if (has_heapmemorycommitted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->heapmemorycommitted(), output);
  }
  
  // required int64 heapMemoryMaximum = 31 [default = -1];
  if (has_heapmemorymaximum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->heapmemorymaximum(), output);
  }
  
  // required int64 nonHeapMemoryInitialized = 32 [default = -1];
  if (has_nonheapmemoryinitialized()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->nonheapmemoryinitialized(), output);
  }
  
  // required int64 nonHeapMemoryUsed = 33 [default = -1];
  if (has_nonheapmemoryused()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->nonheapmemoryused(), output);
  }
  
  // required int64 nonHeapMemoryCommitted = 34 [default = -1];
  if (has_nonheapmemorycommitted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->nonheapmemorycommitted(), output);
  }
  
  // required int64 nonHeapMemoryMaximum = 35 [default = -1];
  if (has_nonheapmemorymaximum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->nonheapmemorymaximum(), output);
  }
  
  // required int64 upTime = 36 [default = -1];
  if (has_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->uptime(), output);
  }
  
  // required int64 startTime = 37 [default = -1];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->starttime(), output);
  }
  
  // required int64 nodeStartTime = 38 [default = -1];
  if (has_nodestarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->nodestarttime(), output);
  }
  
  // required int32 currentThreadCount = 39 [default = -1];
  if (has_currentthreadcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->currentthreadcount(), output);
  }
  
  // required int32 maximumThreadCount = 40 [default = -1];
  if (has_maximumthreadcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->maximumthreadcount(), output);
  }
  
  // required int64 totalStartedThreadCount = 41 [default = -1];
  if (has_totalstartedthreadcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->totalstartedthreadcount(), output);
  }
  
  // required int32 currentDaemonThreadCount = 42 [default = -1];
  if (has_currentdaemonthreadcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->currentdaemonthreadcount(), output);
  }
  
  // required int64 fileSystemFreeSpace = 43 [default = -1];
  if (has_filesystemfreespace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(43, this->filesystemfreespace(), output);
  }
  
  // required int64 fileSystemTotalSpace = 44 [default = -1];
  if (has_filesystemtotalspace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(44, this->filesystemtotalspace(), output);
  }
  
  // required int64 fileSystemUsableSpace = 45 [default = -1];
  if (has_filesystemusablespace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(45, this->filesystemusablespace(), output);
  }
  
  // required int64 lastDataVersion = 46 [default = -1];
  if (has_lastdataversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(46, this->lastdataversion(), output);
  }
  
  // optional double currentGcCpuLoad = 47 [default = -1];
  if (has_currentgccpuload()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(47, this->currentgccpuload(), output);
  }
  
  // optional int32 totalExecutedTasks = 48 [default = -1];
  if (has_totalexecutedtasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->totalexecutedtasks(), output);
  }
  
  // optional int32 sentMessagesCount = 49 [default = -1];
  if (has_sentmessagescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->sentmessagescount(), output);
  }
  
  // optional int64 sentBytesCount = 50 [default = -1];
  if (has_sentbytescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(50, this->sentbytescount(), output);
  }
  
  // optional int32 receivedMessagesCount = 51 [default = -1];
  if (has_receivedmessagescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->receivedmessagescount(), output);
  }
  
  // optional int64 receivedBytesCount = 52 [default = -1];
  if (has_receivedbytescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(52, this->receivedbytescount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoNodeMetricsBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 lastUpdateTime = 1 [default = -1];
  if (has_lastupdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lastupdatetime(), target);
  }
  
  // required int32 maximumActiveJobs = 2 [default = -1];
  if (has_maximumactivejobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maximumactivejobs(), target);
  }
  
  // required int32 currentActiveJobs = 3 [default = -1];
  if (has_currentactivejobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currentactivejobs(), target);
  }
  
  // required float averageActiveJobs = 4 [default = -1];
  if (has_averageactivejobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->averageactivejobs(), target);
  }
  
  // required int32 maximumWaitingJobs = 5 [default = -1];
  if (has_maximumwaitingjobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maximumwaitingjobs(), target);
  }
  
  // required int32 currentWaitingJobs = 6 [default = -1];
  if (has_currentwaitingjobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->currentwaitingjobs(), target);
  }
  
  // required float averageWaitingJobs = 7 [default = -1];
  if (has_averagewaitingjobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->averagewaitingjobs(), target);
  }
  
  // required int32 maximumRejectedJobs = 8 [default = -1];
  if (has_maximumrejectedjobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maximumrejectedjobs(), target);
  }
  
  // required int32 currentRejectedJobs = 9 [default = -1];
  if (has_currentrejectedjobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->currentrejectedjobs(), target);
  }
  
  // required float averageRejectedJobs = 10 [default = -1];
  if (has_averagerejectedjobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->averagerejectedjobs(), target);
  }
  
  // required int32 maximumCancelledJobs = 11 [default = -1];
  if (has_maximumcancelledjobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->maximumcancelledjobs(), target);
  }
  
  // required int32 currentCancelledJobs = 12 [default = -1];
  if (has_currentcancelledjobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->currentcancelledjobs(), target);
  }
  
  // required float averageCancelledJobs = 13 [default = -1];
  if (has_averagecancelledjobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->averagecancelledjobs(), target);
  }
  
  // required int32 totalRejectedJobs = 14 [default = -1];
  if (has_totalrejectedjobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->totalrejectedjobs(), target);
  }
  
  // required int32 totalCancelledJobs = 15 [default = -1];
  if (has_totalcancelledjobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->totalcancelledjobs(), target);
  }
  
  // required int32 totalExecutedJobs = 16 [default = -1];
  if (has_totalexecutedjobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->totalexecutedjobs(), target);
  }
  
  // required int64 maximumJobWaitTime = 17 [default = -1];
  if (has_maximumjobwaittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->maximumjobwaittime(), target);
  }
  
  // required int64 currentJobWaitTime = 18 [default = -1];
  if (has_currentjobwaittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->currentjobwaittime(), target);
  }
  
  // required double averageJobWaitTime = 19 [default = -1];
  if (has_averagejobwaittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->averagejobwaittime(), target);
  }
  
  // required int64 maximumJobExecuteTime = 20 [default = -1];
  if (has_maximumjobexecutetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->maximumjobexecutetime(), target);
  }
  
  // required int64 currentJobExecuteTime = 21 [default = -1];
  if (has_currentjobexecutetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->currentjobexecutetime(), target);
  }
  
  // required double averageJobExecuteTime = 22 [default = -1];
  if (has_averagejobexecutetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->averagejobexecutetime(), target);
  }
  
  // required int64 totalIdleTime = 23 [default = -1];
  if (has_totalidletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->totalidletime(), target);
  }
  
  // required int64 currentIdleTime = 24 [default = -1];
  if (has_currentidletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->currentidletime(), target);
  }
  
  // required int32 totalCpus = 25 [default = -1];
  if (has_totalcpus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->totalcpus(), target);
  }
  
  // required double currentCpuLoad = 26 [default = -1];
  if (has_currentcpuload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->currentcpuload(), target);
  }
  
  // required double averageCpuLoad = 27 [default = -1];
  if (has_averagecpuload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->averagecpuload(), target);
  }
  
  // required int64 heapMemoryInitialized = 28 [default = -1];
  if (has_heapmemoryinitialized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->heapmemoryinitialized(), target);
  }
  
  // required int64 heapMemoryUsed = 29 [default = -1];
  if (has_heapmemoryused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->heapmemoryused(), target);
  }
  
  // required int64 heapMemoryCommitted = 30 [default = -1];
  if (has_heapmemorycommitted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->heapmemorycommitted(), target);
  }
  
  // required int64 heapMemoryMaximum = 31 [default = -1];
  if (has_heapmemorymaximum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->heapmemorymaximum(), target);
  }
  
  // required int64 nonHeapMemoryInitialized = 32 [default = -1];
  if (has_nonheapmemoryinitialized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->nonheapmemoryinitialized(), target);
  }
  
  // required int64 nonHeapMemoryUsed = 33 [default = -1];
  if (has_nonheapmemoryused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->nonheapmemoryused(), target);
  }
  
  // required int64 nonHeapMemoryCommitted = 34 [default = -1];
  if (has_nonheapmemorycommitted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->nonheapmemorycommitted(), target);
  }
  
  // required int64 nonHeapMemoryMaximum = 35 [default = -1];
  if (has_nonheapmemorymaximum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->nonheapmemorymaximum(), target);
  }
  
  // required int64 upTime = 36 [default = -1];
  if (has_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->uptime(), target);
  }
  
  // required int64 startTime = 37 [default = -1];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->starttime(), target);
  }
  
  // required int64 nodeStartTime = 38 [default = -1];
  if (has_nodestarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->nodestarttime(), target);
  }
  
  // required int32 currentThreadCount = 39 [default = -1];
  if (has_currentthreadcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->currentthreadcount(), target);
  }
  
  // required int32 maximumThreadCount = 40 [default = -1];
  if (has_maximumthreadcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->maximumthreadcount(), target);
  }
  
  // required int64 totalStartedThreadCount = 41 [default = -1];
  if (has_totalstartedthreadcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->totalstartedthreadcount(), target);
  }
  
  // required int32 currentDaemonThreadCount = 42 [default = -1];
  if (has_currentdaemonthreadcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->currentdaemonthreadcount(), target);
  }
  
  // required int64 fileSystemFreeSpace = 43 [default = -1];
  if (has_filesystemfreespace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(43, this->filesystemfreespace(), target);
  }
  
  // required int64 fileSystemTotalSpace = 44 [default = -1];
  if (has_filesystemtotalspace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(44, this->filesystemtotalspace(), target);
  }
  
  // required int64 fileSystemUsableSpace = 45 [default = -1];
  if (has_filesystemusablespace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(45, this->filesystemusablespace(), target);
  }
  
  // required int64 lastDataVersion = 46 [default = -1];
  if (has_lastdataversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(46, this->lastdataversion(), target);
  }
  
  // optional double currentGcCpuLoad = 47 [default = -1];
  if (has_currentgccpuload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(47, this->currentgccpuload(), target);
  }
  
  // optional int32 totalExecutedTasks = 48 [default = -1];
  if (has_totalexecutedtasks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->totalexecutedtasks(), target);
  }
  
  // optional int32 sentMessagesCount = 49 [default = -1];
  if (has_sentmessagescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->sentmessagescount(), target);
  }
  
  // optional int64 sentBytesCount = 50 [default = -1];
  if (has_sentbytescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(50, this->sentbytescount(), target);
  }
  
  // optional int32 receivedMessagesCount = 51 [default = -1];
  if (has_receivedmessagescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->receivedmessagescount(), target);
  }
  
  // optional int64 receivedBytesCount = 52 [default = -1];
  if (has_receivedbytescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(52, this->receivedbytescount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoNodeMetricsBean::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 lastUpdateTime = 1 [default = -1];
    if (has_lastupdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastupdatetime());
    }
    
    // required int32 maximumActiveJobs = 2 [default = -1];
    if (has_maximumactivejobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximumactivejobs());
    }
    
    // required int32 currentActiveJobs = 3 [default = -1];
    if (has_currentactivejobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentactivejobs());
    }
    
    // required float averageActiveJobs = 4 [default = -1];
    if (has_averageactivejobs()) {
      total_size += 1 + 4;
    }
    
    // required int32 maximumWaitingJobs = 5 [default = -1];
    if (has_maximumwaitingjobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximumwaitingjobs());
    }
    
    // required int32 currentWaitingJobs = 6 [default = -1];
    if (has_currentwaitingjobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentwaitingjobs());
    }
    
    // required float averageWaitingJobs = 7 [default = -1];
    if (has_averagewaitingjobs()) {
      total_size += 1 + 4;
    }
    
    // required int32 maximumRejectedJobs = 8 [default = -1];
    if (has_maximumrejectedjobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximumrejectedjobs());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 currentRejectedJobs = 9 [default = -1];
    if (has_currentrejectedjobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentrejectedjobs());
    }
    
    // required float averageRejectedJobs = 10 [default = -1];
    if (has_averagerejectedjobs()) {
      total_size += 1 + 4;
    }
    
    // required int32 maximumCancelledJobs = 11 [default = -1];
    if (has_maximumcancelledjobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximumcancelledjobs());
    }
    
    // required int32 currentCancelledJobs = 12 [default = -1];
    if (has_currentcancelledjobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentcancelledjobs());
    }
    
    // required float averageCancelledJobs = 13 [default = -1];
    if (has_averagecancelledjobs()) {
      total_size += 1 + 4;
    }
    
    // required int32 totalRejectedJobs = 14 [default = -1];
    if (has_totalrejectedjobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalrejectedjobs());
    }
    
    // required int32 totalCancelledJobs = 15 [default = -1];
    if (has_totalcancelledjobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcancelledjobs());
    }
    
    // required int32 totalExecutedJobs = 16 [default = -1];
    if (has_totalexecutedjobs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalexecutedjobs());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 maximumJobWaitTime = 17 [default = -1];
    if (has_maximumjobwaittime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maximumjobwaittime());
    }
    
    // required int64 currentJobWaitTime = 18 [default = -1];
    if (has_currentjobwaittime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currentjobwaittime());
    }
    
    // required double averageJobWaitTime = 19 [default = -1];
    if (has_averagejobwaittime()) {
      total_size += 2 + 8;
    }
    
    // required int64 maximumJobExecuteTime = 20 [default = -1];
    if (has_maximumjobexecutetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maximumjobexecutetime());
    }
    
    // required int64 currentJobExecuteTime = 21 [default = -1];
    if (has_currentjobexecutetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currentjobexecutetime());
    }
    
    // required double averageJobExecuteTime = 22 [default = -1];
    if (has_averagejobexecutetime()) {
      total_size += 2 + 8;
    }
    
    // required int64 totalIdleTime = 23 [default = -1];
    if (has_totalidletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalidletime());
    }
    
    // required int64 currentIdleTime = 24 [default = -1];
    if (has_currentidletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currentidletime());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 totalCpus = 25 [default = -1];
    if (has_totalcpus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcpus());
    }
    
    // required double currentCpuLoad = 26 [default = -1];
    if (has_currentcpuload()) {
      total_size += 2 + 8;
    }
    
    // required double averageCpuLoad = 27 [default = -1];
    if (has_averagecpuload()) {
      total_size += 2 + 8;
    }
    
    // required int64 heapMemoryInitialized = 28 [default = -1];
    if (has_heapmemoryinitialized()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->heapmemoryinitialized());
    }
    
    // required int64 heapMemoryUsed = 29 [default = -1];
    if (has_heapmemoryused()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->heapmemoryused());
    }
    
    // required int64 heapMemoryCommitted = 30 [default = -1];
    if (has_heapmemorycommitted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->heapmemorycommitted());
    }
    
    // required int64 heapMemoryMaximum = 31 [default = -1];
    if (has_heapmemorymaximum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->heapmemorymaximum());
    }
    
    // required int64 nonHeapMemoryInitialized = 32 [default = -1];
    if (has_nonheapmemoryinitialized()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nonheapmemoryinitialized());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int64 nonHeapMemoryUsed = 33 [default = -1];
    if (has_nonheapmemoryused()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nonheapmemoryused());
    }
    
    // required int64 nonHeapMemoryCommitted = 34 [default = -1];
    if (has_nonheapmemorycommitted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nonheapmemorycommitted());
    }
    
    // required int64 nonHeapMemoryMaximum = 35 [default = -1];
    if (has_nonheapmemorymaximum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nonheapmemorymaximum());
    }
    
    // required int64 upTime = 36 [default = -1];
    if (has_uptime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uptime());
    }
    
    // required int64 startTime = 37 [default = -1];
    if (has_starttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }
    
    // required int64 nodeStartTime = 38 [default = -1];
    if (has_nodestarttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nodestarttime());
    }
    
    // required int32 currentThreadCount = 39 [default = -1];
    if (has_currentthreadcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentthreadcount());
    }
    
    // required int32 maximumThreadCount = 40 [default = -1];
    if (has_maximumthreadcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximumthreadcount());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required int64 totalStartedThreadCount = 41 [default = -1];
    if (has_totalstartedthreadcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalstartedthreadcount());
    }
    
    // required int32 currentDaemonThreadCount = 42 [default = -1];
    if (has_currentdaemonthreadcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentdaemonthreadcount());
    }
    
    // required int64 fileSystemFreeSpace = 43 [default = -1];
    if (has_filesystemfreespace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filesystemfreespace());
    }
    
    // required int64 fileSystemTotalSpace = 44 [default = -1];
    if (has_filesystemtotalspace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filesystemtotalspace());
    }
    
    // required int64 fileSystemUsableSpace = 45 [default = -1];
    if (has_filesystemusablespace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filesystemusablespace());
    }
    
    // required int64 lastDataVersion = 46 [default = -1];
    if (has_lastdataversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastdataversion());
    }
    
    // optional double currentGcCpuLoad = 47 [default = -1];
    if (has_currentgccpuload()) {
      total_size += 2 + 8;
    }
    
    // optional int32 totalExecutedTasks = 48 [default = -1];
    if (has_totalexecutedtasks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalexecutedtasks());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 sentMessagesCount = 49 [default = -1];
    if (has_sentmessagescount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sentmessagescount());
    }
    
    // optional int64 sentBytesCount = 50 [default = -1];
    if (has_sentbytescount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sentbytescount());
    }
    
    // optional int32 receivedMessagesCount = 51 [default = -1];
    if (has_receivedmessagescount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receivedmessagescount());
    }
    
    // optional int64 receivedBytesCount = 52 [default = -1];
    if (has_receivedbytescount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receivedbytescount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoNodeMetricsBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoNodeMetricsBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoNodeMetricsBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoNodeMetricsBean::MergeFrom(const ProtoNodeMetricsBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lastupdatetime()) {
      set_lastupdatetime(from.lastupdatetime());
    }
    if (from.has_maximumactivejobs()) {
      set_maximumactivejobs(from.maximumactivejobs());
    }
    if (from.has_currentactivejobs()) {
      set_currentactivejobs(from.currentactivejobs());
    }
    if (from.has_averageactivejobs()) {
      set_averageactivejobs(from.averageactivejobs());
    }
    if (from.has_maximumwaitingjobs()) {
      set_maximumwaitingjobs(from.maximumwaitingjobs());
    }
    if (from.has_currentwaitingjobs()) {
      set_currentwaitingjobs(from.currentwaitingjobs());
    }
    if (from.has_averagewaitingjobs()) {
      set_averagewaitingjobs(from.averagewaitingjobs());
    }
    if (from.has_maximumrejectedjobs()) {
      set_maximumrejectedjobs(from.maximumrejectedjobs());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_currentrejectedjobs()) {
      set_currentrejectedjobs(from.currentrejectedjobs());
    }
    if (from.has_averagerejectedjobs()) {
      set_averagerejectedjobs(from.averagerejectedjobs());
    }
    if (from.has_maximumcancelledjobs()) {
      set_maximumcancelledjobs(from.maximumcancelledjobs());
    }
    if (from.has_currentcancelledjobs()) {
      set_currentcancelledjobs(from.currentcancelledjobs());
    }
    if (from.has_averagecancelledjobs()) {
      set_averagecancelledjobs(from.averagecancelledjobs());
    }
    if (from.has_totalrejectedjobs()) {
      set_totalrejectedjobs(from.totalrejectedjobs());
    }
    if (from.has_totalcancelledjobs()) {
      set_totalcancelledjobs(from.totalcancelledjobs());
    }
    if (from.has_totalexecutedjobs()) {
      set_totalexecutedjobs(from.totalexecutedjobs());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_maximumjobwaittime()) {
      set_maximumjobwaittime(from.maximumjobwaittime());
    }
    if (from.has_currentjobwaittime()) {
      set_currentjobwaittime(from.currentjobwaittime());
    }
    if (from.has_averagejobwaittime()) {
      set_averagejobwaittime(from.averagejobwaittime());
    }
    if (from.has_maximumjobexecutetime()) {
      set_maximumjobexecutetime(from.maximumjobexecutetime());
    }
    if (from.has_currentjobexecutetime()) {
      set_currentjobexecutetime(from.currentjobexecutetime());
    }
    if (from.has_averagejobexecutetime()) {
      set_averagejobexecutetime(from.averagejobexecutetime());
    }
    if (from.has_totalidletime()) {
      set_totalidletime(from.totalidletime());
    }
    if (from.has_currentidletime()) {
      set_currentidletime(from.currentidletime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_totalcpus()) {
      set_totalcpus(from.totalcpus());
    }
    if (from.has_currentcpuload()) {
      set_currentcpuload(from.currentcpuload());
    }
    if (from.has_averagecpuload()) {
      set_averagecpuload(from.averagecpuload());
    }
    if (from.has_heapmemoryinitialized()) {
      set_heapmemoryinitialized(from.heapmemoryinitialized());
    }
    if (from.has_heapmemoryused()) {
      set_heapmemoryused(from.heapmemoryused());
    }
    if (from.has_heapmemorycommitted()) {
      set_heapmemorycommitted(from.heapmemorycommitted());
    }
    if (from.has_heapmemorymaximum()) {
      set_heapmemorymaximum(from.heapmemorymaximum());
    }
    if (from.has_nonheapmemoryinitialized()) {
      set_nonheapmemoryinitialized(from.nonheapmemoryinitialized());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_nonheapmemoryused()) {
      set_nonheapmemoryused(from.nonheapmemoryused());
    }
    if (from.has_nonheapmemorycommitted()) {
      set_nonheapmemorycommitted(from.nonheapmemorycommitted());
    }
    if (from.has_nonheapmemorymaximum()) {
      set_nonheapmemorymaximum(from.nonheapmemorymaximum());
    }
    if (from.has_uptime()) {
      set_uptime(from.uptime());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_nodestarttime()) {
      set_nodestarttime(from.nodestarttime());
    }
    if (from.has_currentthreadcount()) {
      set_currentthreadcount(from.currentthreadcount());
    }
    if (from.has_maximumthreadcount()) {
      set_maximumthreadcount(from.maximumthreadcount());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_totalstartedthreadcount()) {
      set_totalstartedthreadcount(from.totalstartedthreadcount());
    }
    if (from.has_currentdaemonthreadcount()) {
      set_currentdaemonthreadcount(from.currentdaemonthreadcount());
    }
    if (from.has_filesystemfreespace()) {
      set_filesystemfreespace(from.filesystemfreespace());
    }
    if (from.has_filesystemtotalspace()) {
      set_filesystemtotalspace(from.filesystemtotalspace());
    }
    if (from.has_filesystemusablespace()) {
      set_filesystemusablespace(from.filesystemusablespace());
    }
    if (from.has_lastdataversion()) {
      set_lastdataversion(from.lastdataversion());
    }
    if (from.has_currentgccpuload()) {
      set_currentgccpuload(from.currentgccpuload());
    }
    if (from.has_totalexecutedtasks()) {
      set_totalexecutedtasks(from.totalexecutedtasks());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_sentmessagescount()) {
      set_sentmessagescount(from.sentmessagescount());
    }
    if (from.has_sentbytescount()) {
      set_sentbytescount(from.sentbytescount());
    }
    if (from.has_receivedmessagescount()) {
      set_receivedmessagescount(from.receivedmessagescount());
    }
    if (from.has_receivedbytescount()) {
      set_receivedbytescount(from.receivedbytescount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoNodeMetricsBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoNodeMetricsBean::CopyFrom(const ProtoNodeMetricsBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoNodeMetricsBean::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00003fff) != 0x00003fff) return false;
  
  return true;
}

void ProtoNodeMetricsBean::Swap(ProtoNodeMetricsBean* other) {
  if (other != this) {
    std::swap(lastupdatetime_, other->lastupdatetime_);
    std::swap(maximumactivejobs_, other->maximumactivejobs_);
    std::swap(currentactivejobs_, other->currentactivejobs_);
    std::swap(averageactivejobs_, other->averageactivejobs_);
    std::swap(maximumwaitingjobs_, other->maximumwaitingjobs_);
    std::swap(currentwaitingjobs_, other->currentwaitingjobs_);
    std::swap(averagewaitingjobs_, other->averagewaitingjobs_);
    std::swap(maximumrejectedjobs_, other->maximumrejectedjobs_);
    std::swap(currentrejectedjobs_, other->currentrejectedjobs_);
    std::swap(averagerejectedjobs_, other->averagerejectedjobs_);
    std::swap(maximumcancelledjobs_, other->maximumcancelledjobs_);
    std::swap(currentcancelledjobs_, other->currentcancelledjobs_);
    std::swap(averagecancelledjobs_, other->averagecancelledjobs_);
    std::swap(totalrejectedjobs_, other->totalrejectedjobs_);
    std::swap(totalcancelledjobs_, other->totalcancelledjobs_);
    std::swap(totalexecutedjobs_, other->totalexecutedjobs_);
    std::swap(maximumjobwaittime_, other->maximumjobwaittime_);
    std::swap(currentjobwaittime_, other->currentjobwaittime_);
    std::swap(averagejobwaittime_, other->averagejobwaittime_);
    std::swap(maximumjobexecutetime_, other->maximumjobexecutetime_);
    std::swap(currentjobexecutetime_, other->currentjobexecutetime_);
    std::swap(averagejobexecutetime_, other->averagejobexecutetime_);
    std::swap(totalidletime_, other->totalidletime_);
    std::swap(currentidletime_, other->currentidletime_);
    std::swap(totalcpus_, other->totalcpus_);
    std::swap(currentcpuload_, other->currentcpuload_);
    std::swap(averagecpuload_, other->averagecpuload_);
    std::swap(heapmemoryinitialized_, other->heapmemoryinitialized_);
    std::swap(heapmemoryused_, other->heapmemoryused_);
    std::swap(heapmemorycommitted_, other->heapmemorycommitted_);
    std::swap(heapmemorymaximum_, other->heapmemorymaximum_);
    std::swap(nonheapmemoryinitialized_, other->nonheapmemoryinitialized_);
    std::swap(nonheapmemoryused_, other->nonheapmemoryused_);
    std::swap(nonheapmemorycommitted_, other->nonheapmemorycommitted_);
    std::swap(nonheapmemorymaximum_, other->nonheapmemorymaximum_);
    std::swap(uptime_, other->uptime_);
    std::swap(starttime_, other->starttime_);
    std::swap(nodestarttime_, other->nodestarttime_);
    std::swap(currentthreadcount_, other->currentthreadcount_);
    std::swap(maximumthreadcount_, other->maximumthreadcount_);
    std::swap(totalstartedthreadcount_, other->totalstartedthreadcount_);
    std::swap(currentdaemonthreadcount_, other->currentdaemonthreadcount_);
    std::swap(filesystemfreespace_, other->filesystemfreespace_);
    std::swap(filesystemtotalspace_, other->filesystemtotalspace_);
    std::swap(filesystemusablespace_, other->filesystemusablespace_);
    std::swap(lastdataversion_, other->lastdataversion_);
    std::swap(currentgccpuload_, other->currentgccpuload_);
    std::swap(totalexecutedtasks_, other->totalexecutedtasks_);
    std::swap(sentmessagescount_, other->sentmessagescount_);
    std::swap(sentbytescount_, other->sentbytescount_);
    std::swap(receivedmessagescount_, other->receivedmessagescount_);
    std::swap(receivedbytescount_, other->receivedbytescount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoNodeMetricsBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoNodeMetricsBean_descriptor_;
  metadata.reflection = ProtoNodeMetricsBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoNodeBean::kNodeIdFieldNumber;
const int ProtoNodeBean::kTcpAddressFieldNumber;
const int ProtoNodeBean::kJettyAddressFieldNumber;
const int ProtoNodeBean::kTcpPortFieldNumber;
const int ProtoNodeBean::kJettyPortFieldNumber;
const int ProtoNodeBean::kMetricsFieldNumber;
const int ProtoNodeBean::kAttributesFieldNumber;
const int ProtoNodeBean::kCachesFieldNumber;
const int ProtoNodeBean::kTcpHostNameFieldNumber;
const int ProtoNodeBean::kJettyHostNameFieldNumber;
const int ProtoNodeBean::kReplicaCountFieldNumber;
const int ProtoNodeBean::kConsistentIdFieldNumber;
#endif  // !_MSC_VER

ProtoNodeBean::ProtoNodeBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoNodeBean::InitAsDefaultInstance() {
  metrics_ = const_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::ProtoNodeMetricsBean*>(&::org::gridgain::grid::kernal::processors::rest::client::message::ProtoNodeMetricsBean::default_instance());
  attributes_ = const_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::Map*>(&::org::gridgain::grid::kernal::processors::rest::client::message::Map::default_instance());
  caches_ = const_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::Map*>(&::org::gridgain::grid::kernal::processors::rest::client::message::Map::default_instance());
  consistentid_ = const_cast< ::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper*>(&::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::default_instance());
}

ProtoNodeBean::ProtoNodeBean(const ProtoNodeBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoNodeBean::SharedCtor() {
  _cached_size_ = 0;
  nodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tcpport_ = 0;
  jettyport_ = 0;
  metrics_ = NULL;
  attributes_ = NULL;
  caches_ = NULL;
  replicacount_ = 0;
  consistentid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoNodeBean::~ProtoNodeBean() {
  SharedDtor();
}

void ProtoNodeBean::SharedDtor() {
  if (nodeid_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid_;
  }
  if (this != default_instance_) {
    delete metrics_;
    delete attributes_;
    delete caches_;
    delete consistentid_;
  }
}

void ProtoNodeBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoNodeBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoNodeBean_descriptor_;
}

const ProtoNodeBean& ProtoNodeBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessages_2eproto();  return *default_instance_;
}

ProtoNodeBean* ProtoNodeBean::default_instance_ = NULL;

ProtoNodeBean* ProtoNodeBean::New() const {
  return new ProtoNodeBean;
}

void ProtoNodeBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nodeid()) {
      if (nodeid_ != &::google::protobuf::internal::kEmptyString) {
        nodeid_->clear();
      }
    }
    tcpport_ = 0;
    jettyport_ = 0;
    if (has_metrics()) {
      if (metrics_ != NULL) metrics_->::org::gridgain::grid::kernal::processors::rest::client::message::ProtoNodeMetricsBean::Clear();
    }
    if (has_attributes()) {
      if (attributes_ != NULL) attributes_->::org::gridgain::grid::kernal::processors::rest::client::message::Map::Clear();
    }
    if (has_caches()) {
      if (caches_ != NULL) caches_->::org::gridgain::grid::kernal::processors::rest::client::message::Map::Clear();
    }
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    replicacount_ = 0;
    if (has_consistentid()) {
      if (consistentid_ != NULL) consistentid_->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::Clear();
    }
  }
  tcpaddress_.Clear();
  jettyaddress_.Clear();
  tcphostname_.Clear();
  jettyhostname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoNodeBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes nodeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nodeid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tcpAddress;
        break;
      }
      
      // repeated string tcpAddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tcpAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tcpaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tcpaddress(0).data(), this->tcpaddress(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tcpAddress;
        if (input->ExpectTag(26)) goto parse_jettyAddress;
        break;
      }
      
      // repeated string jettyAddress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jettyAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_jettyaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jettyaddress(0).data(), this->jettyaddress(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_jettyAddress;
        if (input->ExpectTag(32)) goto parse_tcpPort;
        break;
      }
      
      // required int32 tcpPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcpport_)));
          set_has_tcpport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_jettyPort;
        break;
      }
      
      // required int32 jettyPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jettyPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jettyport_)));
          set_has_jettyport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_metrics;
        break;
      }
      
      // optional .org.gridgain.grid.kernal.processors.rest.client.message.ProtoNodeMetricsBean metrics = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metrics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attributes;
        break;
      }
      
      // optional .org.gridgain.grid.kernal.processors.rest.client.message.Map attributes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_caches;
        break;
      }
      
      // optional .org.gridgain.grid.kernal.processors.rest.client.message.Map caches = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caches()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tcpHostName;
        break;
      }
      
      // repeated string tcpHostName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tcpHostName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tcphostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tcphostname(0).data(), this->tcphostname(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tcpHostName;
        if (input->ExpectTag(90)) goto parse_jettyHostName;
        break;
      }
      
      // repeated string jettyHostName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jettyHostName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_jettyhostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jettyhostname(0).data(), this->jettyhostname(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_jettyHostName;
        if (input->ExpectTag(104)) goto parse_replicaCount;
        break;
      }
      
      // required int32 replicaCount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replicaCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicacount_)));
          set_has_replicacount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_consistentId;
        break;
      }
      
      // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper consistentId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consistentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consistentid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoNodeBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes nodeId = 1;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->nodeid(), output);
  }
  
  // repeated string tcpAddress = 2;
  for (int i = 0; i < this->tcpaddress_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->tcpaddress(i).data(), this->tcpaddress(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tcpaddress(i), output);
  }
  
  // repeated string jettyAddress = 3;
  for (int i = 0; i < this->jettyaddress_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->jettyaddress(i).data(), this->jettyaddress(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->jettyaddress(i), output);
  }
  
  // required int32 tcpPort = 4;
  if (has_tcpport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tcpport(), output);
  }
  
  // required int32 jettyPort = 5;
  if (has_jettyport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->jettyport(), output);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.ProtoNodeMetricsBean metrics = 6;
  if (has_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->metrics(), output);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.Map attributes = 7;
  if (has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attributes(), output);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.Map caches = 9;
  if (has_caches()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->caches(), output);
  }
  
  // repeated string tcpHostName = 10;
  for (int i = 0; i < this->tcphostname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->tcphostname(i).data(), this->tcphostname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->tcphostname(i), output);
  }
  
  // repeated string jettyHostName = 11;
  for (int i = 0; i < this->jettyhostname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->jettyhostname(i).data(), this->jettyhostname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->jettyhostname(i), output);
  }
  
  // required int32 replicaCount = 13;
  if (has_replicacount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->replicacount(), output);
  }
  
  // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper consistentId = 14;
  if (has_consistentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->consistentid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoNodeBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes nodeId = 1;
  if (has_nodeid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nodeid(), target);
  }
  
  // repeated string tcpAddress = 2;
  for (int i = 0; i < this->tcpaddress_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tcpaddress(i).data(), this->tcpaddress(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->tcpaddress(i), target);
  }
  
  // repeated string jettyAddress = 3;
  for (int i = 0; i < this->jettyaddress_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jettyaddress(i).data(), this->jettyaddress(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->jettyaddress(i), target);
  }
  
  // required int32 tcpPort = 4;
  if (has_tcpport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tcpport(), target);
  }
  
  // required int32 jettyPort = 5;
  if (has_jettyport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->jettyport(), target);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.ProtoNodeMetricsBean metrics = 6;
  if (has_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->metrics(), target);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.Map attributes = 7;
  if (has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attributes(), target);
  }
  
  // optional .org.gridgain.grid.kernal.processors.rest.client.message.Map caches = 9;
  if (has_caches()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->caches(), target);
  }
  
  // repeated string tcpHostName = 10;
  for (int i = 0; i < this->tcphostname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tcphostname(i).data(), this->tcphostname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->tcphostname(i), target);
  }
  
  // repeated string jettyHostName = 11;
  for (int i = 0; i < this->jettyhostname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jettyhostname(i).data(), this->jettyhostname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->jettyhostname(i), target);
  }
  
  // required int32 replicaCount = 13;
  if (has_replicacount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->replicacount(), target);
  }
  
  // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper consistentId = 14;
  if (has_consistentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->consistentid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoNodeBean::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes nodeId = 1;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nodeid());
    }
    
    // required int32 tcpPort = 4;
    if (has_tcpport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tcpport());
    }
    
    // required int32 jettyPort = 5;
    if (has_jettyport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jettyport());
    }
    
    // optional .org.gridgain.grid.kernal.processors.rest.client.message.ProtoNodeMetricsBean metrics = 6;
    if (has_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metrics());
    }
    
    // optional .org.gridgain.grid.kernal.processors.rest.client.message.Map attributes = 7;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }
    
    // optional .org.gridgain.grid.kernal.processors.rest.client.message.Map caches = 9;
    if (has_caches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caches());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // required int32 replicaCount = 13;
    if (has_replicacount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replicacount());
    }
    
    // required .org.gridgain.grid.kernal.processors.rest.client.message.ObjectWrapper consistentId = 14;
    if (has_consistentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->consistentid());
    }
    
  }
  // repeated string tcpAddress = 2;
  total_size += 1 * this->tcpaddress_size();
  for (int i = 0; i < this->tcpaddress_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tcpaddress(i));
  }
  
  // repeated string jettyAddress = 3;
  total_size += 1 * this->jettyaddress_size();
  for (int i = 0; i < this->jettyaddress_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->jettyaddress(i));
  }
  
  // repeated string tcpHostName = 10;
  total_size += 1 * this->tcphostname_size();
  for (int i = 0; i < this->tcphostname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tcphostname(i));
  }
  
  // repeated string jettyHostName = 11;
  total_size += 1 * this->jettyhostname_size();
  for (int i = 0; i < this->jettyhostname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->jettyhostname(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoNodeBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoNodeBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoNodeBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoNodeBean::MergeFrom(const ProtoNodeBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  tcpaddress_.MergeFrom(from.tcpaddress_);
  jettyaddress_.MergeFrom(from.jettyaddress_);
  tcphostname_.MergeFrom(from.tcphostname_);
  jettyhostname_.MergeFrom(from.jettyhostname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodeid()) {
      set_nodeid(from.nodeid());
    }
    if (from.has_tcpport()) {
      set_tcpport(from.tcpport());
    }
    if (from.has_jettyport()) {
      set_jettyport(from.jettyport());
    }
    if (from.has_metrics()) {
      mutable_metrics()->::org::gridgain::grid::kernal::processors::rest::client::message::ProtoNodeMetricsBean::MergeFrom(from.metrics());
    }
    if (from.has_attributes()) {
      mutable_attributes()->::org::gridgain::grid::kernal::processors::rest::client::message::Map::MergeFrom(from.attributes());
    }
    if (from.has_caches()) {
      mutable_caches()->::org::gridgain::grid::kernal::processors::rest::client::message::Map::MergeFrom(from.caches());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_replicacount()) {
      set_replicacount(from.replicacount());
    }
    if (from.has_consistentid()) {
      mutable_consistentid()->::org::gridgain::grid::kernal::processors::rest::client::message::ObjectWrapper::MergeFrom(from.consistentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoNodeBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoNodeBean::CopyFrom(const ProtoNodeBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoNodeBean::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000c19) != 0x00000c19) return false;
  
  if (has_metrics()) {
    if (!this->metrics().IsInitialized()) return false;
  }
  if (has_attributes()) {
    if (!this->attributes().IsInitialized()) return false;
  }
  if (has_caches()) {
    if (!this->caches().IsInitialized()) return false;
  }
  if (has_consistentid()) {
    if (!this->consistentid().IsInitialized()) return false;
  }
  return true;
}

void ProtoNodeBean::Swap(ProtoNodeBean* other) {
  if (other != this) {
    std::swap(nodeid_, other->nodeid_);
    tcpaddress_.Swap(&other->tcpaddress_);
    jettyaddress_.Swap(&other->jettyaddress_);
    std::swap(tcpport_, other->tcpport_);
    std::swap(jettyport_, other->jettyport_);
    std::swap(metrics_, other->metrics_);
    std::swap(attributes_, other->attributes_);
    std::swap(caches_, other->caches_);
    tcphostname_.Swap(&other->tcphostname_);
    jettyhostname_.Swap(&other->jettyhostname_);
    std::swap(replicacount_, other->replicacount_);
    std::swap(consistentid_, other->consistentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoNodeBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoNodeBean_descriptor_;
  metadata.reflection = ProtoNodeBean_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace client
}  // namespace rest
}  // namespace processors
}  // namespace kernal
}  // namespace grid
}  // namespace gridgain
}  // namespace org

// @@protoc_insertion_point(global_scope)
